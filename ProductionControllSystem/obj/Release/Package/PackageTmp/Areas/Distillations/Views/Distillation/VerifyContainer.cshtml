@using ProductionControllSystem.Areas.Processing.Models;
@using ClassLibrary.DatabaseModels;

@model  TransferLiquidViewModel
@{
    ViewBag.Title = "Container Verification";
}

<title>@ViewBag.title</title>
<h5>@ViewBag.title</h5>


<ul class="nav nav-tabs" style="margin-bottom: 15px;">
    <li class="active"><a href="#transfer" data-toggle="tab">Transfer</a></li>
    <li><a href="#container" data-toggle="tab">Containers</a></li>
</ul>
<div id="myTabContent" class="tab-content">
    <div class="tab-pane fade active in" id="transfer">
        <div class="panel sub-content-panel col-md-12">
            <form action="no-implementation" id="liquidTransfer-form" method="POST">
                <div class="col-md-12">

                    <div id="name-group" class="form-group col-md-2">
                        <div class="col-md-12">
                            <label for="name" class="custom-label">Container : </label>
                        </div>
                        <div class="col-md-12">
                            @if (Model.ToContainer.Count > 0)
                            {

                                @Html.DropDownListFor(m => m.ToContainer,
                                  new SelectList(Model.ToContainer,
                               "Id", "ContainerName",
                                        Model.FromContainer.First().Id), new { @class = "form-control", id = "Id", name = "ToContainer" })
                            }
                            else
                            {
                                <label class="custom-label">No Vat.</label>
                            }
                        </div>
                    </div>

                    <div class="col-md-3" id="liquid-percentage-to">
                        <div class="col-md-6 vat_div">
                            <div class="progress vertical-sibling">
                                <div class="progress-bar progress-bar-one progress-bar-striped " role="progressbar" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"> </div>
                                <div class="progress-bar progress-bar-two progress-bar-striped " role="progressbar" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"> </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                        </div>
                    </div>

                    <div id="name-group" class="form-group col-md-2">
                        <label for="name" class="custom-label">Dip Level(cm)</label>
                        @Html.TextBoxFor(m => m.DestinationDepthTo, new { @class = "form-control custom-text-box", required = "true", type = "number", step = "0.01", min = 1 })
                    </div>


                    <div id="name-group" class="form-group col-md-2">
                        <label for="name" class="custom-label">Temperature (C)</label>
                        @Html.TextBoxFor(m => m.DestinationTemperature, new { @class = "form-control custom-text-box", required = "true", type = "number", step = "0.01", min = 1 })
                    </div>

                    <div id="name-group" class="form-group col-md-2">
                        <label for="name" class="custom-label">Density (Kg/m<sup>3</sup>)</label>
                        @Html.TextBoxFor(m => m.DestinationDensity, new { @class = "form-control custom-text-box", required = "true", type = "number", step = "0.01", min = 1 })
                    </div>

                </div>
                <div class="col-md-12">

                    <div id="name-group" class="form-group col-md-2">
                        <label for="name" class="custom-label">Strength</label>
                        @Html.TextBoxFor(m => m.DestinationStrength, new { @class = "form-control disabled", required = "true", tabindex = "-1", type = "number", step = "0.01" })
                    </div>

                    <div id="name-group" class="form-group col-md-2">
                        <label for="name" class="custom-label">Bulk (l):</label>
                        @Html.TextBoxFor(m => m.DestinationBulkVolume, new { @class = "form-control custom-text-box", required = "true", type = "number", tabindex = "-1", step = "0.01" })
                    </div>

                    <div id="name-group" class="form-group col-md-2">
                        <input type="submit" class="btn btn-primary btn-raised" value="Add" />
                    </div>
                </div>

            </form>
        </div>

        <div class="tab-pane fade " id="container">
            <div class="col-md-12 panel sub-content-panel pull-right">
                <h5>Containers</h5>
                <table id="containers-table" class="display table table-hover table-striped" cellspacing="0" width="100%">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Container Name</th>
                            <th>Liquid Type</th>
                            <th>Liquid Type Id</th>
                            <th>Current Drip</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (Container reciever in Model.ToContainer)
                        {
                            if (reciever.Id != "0")
                            {

                                <tr>
                                    <td>
                                        @reciever.Id
                                    </td>
                                    <td>
                                        @reciever.ContainerName
                                    </td>
                                    <td>
                                        @if (Model.LiquidTypeId.Find(l => l.LiquidTypeId == reciever.LiquidTypeId) != null)
                                        {
                                            <span>@Model.LiquidTypeId.Find(l => l.LiquidTypeId == reciever.LiquidTypeId).LiquidName</span>
                                        }
                                        else
                                        {
                                            <span>Unknown</span>
                                        }
                                    </td>
                                    <td>
                                        @reciever.LiquidTypeId
                                    </td>
                                    <td>
                                        @reciever.CurrentDepth
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>


    @section script
    {
        <script>
            var fromContainer = null;
            var toContainer = null;

            var receiversTable = initiateTable1("containers-table",
                {
                    "footer": true,
                    "bLengthChange": false
                }
            , function () { }, function () { });

            // Destination
            $("select[name=ToContainer]").change(function () {
                if ($(this).val() == "0") {
                    if ($(this).val() == "0") {

                        $("#liquid-percentage-from").removeAttr("style");
                        MaterialSelectReinitiate("select[name='LiquidTypeId']", 0)
                        toContainer["currentDepth"] = 0;

                        $("input[name='DestinationDepthTo']").val("0");
                        $("input[name='DestinationDensity']").val("0");
                        $("input[name='DestinationTemperature']").val("0");
                        $("input[name='DestinationStrength']").val("0");
                        $("input[name='DestinationBulkVolume']").val("0");
                        $("input[name='DestinationPureVolume']").val("0");
                        $("input[name='Wastage']").val("0");

                        updateContainerImages(0);
                        return;
                    }
                    return;
                }
                $.ajax({
                    type: 'get',
                    url: "../../api/Container/Get?containerId=" + $(this).val(),
                    dataType: 'json',
                    async: false,
                    contentType: 'application/json',
                    success: function (response) {
                        toContainer = response;

                        var capacity = parseFloat((typeof response["capacity"] != 'undefined' && response["capacity"] != "") ? response["capacity"] : "0");
                        var density = parseFloat((typeof response["density"] != 'undefined' && response["density"] != "") ? response["density"] : "0") / 1000;
                        var volume = parseFloat((typeof response["fillVolume"] != 'undefined' && response["fillVolume"] != "") ? response["fillVolume"] : "0");


                        $("input[name='DestinationDepthTo']").val(0);
                        $("input[name='DestinationDepthTo']").attr("min", 0);
                        $("input[name='DestinationDepthTo']").attr("max", response["maxDepth"]);

                        var destinationDepth = !isNaN(parseFloat($("input[name=DestinationDepthTo]").val())) ? parseFloat($("input[name=DestinationDepthTo]").val()) : 0;

                        updateContainerImages(0);
                    },
                    error: function (response) {
                        console.log("no container");
                    }
                });

                // reset destination table
                $("input[name='DestinationDepthTo']").val(0);
                $("input[name='DestinationTemperature']").val(0);
                $("input[name='DestinationDensity']").val(0);
                $("input[name='DestinationStrength']").val(0);
                $("input[name='DestinationBulkVolume']").val(0);
            });

            $('input[name=DestinationDensity]').keyup(function () {
                if ($('input[name=DestinationTemperature]').val() != '') {
                    var strength = getStrength($(this).val(), $('input[name=DestinationTemperature]').val());
                    strength = !isNaN(strength) ? parseFloat(strength) : 0;
                    $("input[name=DestinationStrength]").val(strength.toFixed(1));
                } else {
                    $("input[name=DestinationStrength]").val('');
                }

            });

            $('input[name=DestinationTemperature]').keyup(function () {
                if ($('input[name=DestinationDensity]').val() != '') {
                    var strength = getStrength($('input[name=DestinationDensity]').val(), $(this).val());
                    strength = !isNaN(strength) ? parseFloat(strength) : 0;

                    $("input[name=DestinationStrength]").val(strength.toFixed(1));
                } else {
                    $("input[name=DestinationStrength]").val('');
                    $("input[name=DestinationWeight]").val('');
                }

            });

            $("input[name='DestinationDepthTo']").keyup(function () {
                var depthTo = !isNaN(parseFloat($(this).val())) ? parseFloat($(this).val()) : 0;

                var volume = parseFloat(getVolume(toContainer["containerId"], 0, depthTo));

                $("input[name='DestinationBulkVolume']").val(volume.toFixed(1));
                updateContainerImages(depthTo);

            });

            $("input[name='DestinationBulkVolume']").on("change",function () {
                var volume = !isNaN(parseFloat($(this).val())) ? parseFloat($(this).val()) : 0;

                var dip = parseFloat(getDip(toContainer["containerId"], volume));

                $("input[name='DestinationDepthTo']").val(dip.toFixed(1));
            });


            
            function updateContainerImages(toContainerToDepth) {

                if (toContainer != null) {

                    var containerView = $("#" + "liquid-percentage-to");
                    var progressBar = containerView.find(".progress");
                    var greenbar = progressBar.find(".progress-bar-one");
                    var blackbar = progressBar.find(".progress-bar-two");
                    var barTwoWidth = "width:" + ((((toContainerToDepth)) / parseFloat(toContainer["maxDepth"])) * 100).toFixed(1) + "%;" + "background-color:yellow";
                    console.log(barTwoWidth);
                    greenbar.attr("style", barTwoWidth);
                }

            }

            $('select').each(function () {
                $(this).material_select();
                $(this).siblings("span").html("");
            });
            $('select').addClass("hidden");

            $(".navigation-help").html("Distillation / Container Verification");
        </script>
    }