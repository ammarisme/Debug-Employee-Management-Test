@using ProductionControllSystem.Areas.Distillations.Models;
@using ClassLibrary.DatabaseModels;
@model  DistillationViewModel
@{
    ViewBag.title = "Double Distillate";
}
<title>@ViewBag.title</title>
<h5>@ViewBag.title</h5>

<ul class="nav nav-tabs" style="margin-bottom: 15px;">
    <li class="active"><a href="#distillations" data-toggle="tab">Distillate</a></li>
</ul>
<div id="myTabContent" class="tab-content">
    <div class="tab-pane fade active in" id="distillations">
        <div class="row">
            
            <div class="col-md-6 panel sub-content-panel">
                <form action="no-implemetation" id="distillation-form" method="POST">

                    @Html.TextBoxFor(m => m.MachineId, new { @class = "form-control hidden", required = "true", type = "text" })
                    @Html.TextBoxFor(m => m.ContainerId, new { @class = "form-control hidden", required = "true", type = "text" })
                    @Html.TextBoxFor(m => m.CreatedUser, new { @class = "form-control hidden", required = "true", type = "text" })


                    <div class="col-md-12">

                        <div id="name-group" class="form-group col-md-4">
                            <label for="name" class="custom-label">From depth (cm):</label>
                            @Html.TextBoxFor(m => m.ContainerFromDepth, new { @class = "form-control custom-text-box disabled", tabindex = "-1" , required = "true", step = "0.01", autocomplete = "off" })
                        </div>
                        <div id="name-group" class="form-group col-md-4">
                            <label for="name" class="custom-label">To depth (cm) :</label>
                            @Html.TextBoxFor(m => m.ContainerToDepth, new { @class = "form-control custom-text-box", required = "true", step = "0.01", autocomplete = "off" })
                        </div>
                        <div id="name-group" class="form-group col-md-4">
                            <label for="name" class="custom-label"> Bulk Volume (l) :</label>
                            @Html.TextBoxFor(m => m.InputGrossVolume, new { @class = "form-control custom-text-box", required = "true", step = "0.01", autocomplete = "off" })
                        </div>
                        <div id="name-group" class="form-group col-md-4">
                            <label for="name" class="custom-label"> Pure Volume (l) :</label>
                            @Html.TextBoxFor(m => m.InputPureVolume, new { @class = "form-control custom-text-box", required = "true", step = "0.01", autocomplete = "off" })
                        </div>
                    </div>

                    <div class="col-md-12">
                        <div id="name-group" class="form-group col-md-4">
                            <label for="name" class="custom-label">Temperature (C):</label>
                            @Html.TextBoxFor(m => m.Temperature, new { @class = "form-control custom-text-box", required = "true", step = "0.01", autocomplete = "off" })
                        </div>
                        <div id="name-group" class="form-group col-md-4">
                            <label for="name" class="custom-label">Density (kg/l) :</label>
                            @Html.TextBoxFor(m => m.Density, new { @class = "form-control custom-text-box", required = "true", step = "0.01", autocomplete = "off" })
                        </div>
                        <div id="name-group" class="form-group col-md-4">
                            <label for="name" class="custom-label">Strength :</label>
                            @Html.TextBoxFor(m => m.Strength, new { @class = "form-control custom-text-box", required = "true", step = "0.01", autocomplete = "off" })
                        </div>
                    <div id="name-group" class="form-group col-md-6">
                        <label for="name" class="custom-label">Start time : </label>
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar"></span>
                            @Html.TextBoxFor(m => m.StartTime, new { @class = "datepicker", required = "true" })
                        </span>
                    </div>
                    </div>


                    
                    <div class="col-md-12">
                        <button type="submit" class="btn btn-primary btn-raised pull-right">Double Distillate<span class="fa fa-arrow-down"></span></button>
                    </div>
</form>
            </div>
            
            <div class="col-md-6 pull-right">
                <div class="col-md-11 pull-right panel sub-content-panel">
                    <table id="machines-table" class="" cellspacing="0">
                        <thead>
                            <tr>
                                <th>Id</th>
                                <th>MachineName</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (Machine machine in Model.MachineId)
                    {
                                <tr>
                                    <td>@machine.Id</td>
                                    <td>@machine.MachineName</td>
                                </tr>
                    }
                        </tbody>
                    </table>
                </div>

                <div class="col-md-11 pull-right panel sub-content-panel">
                    <table id="recievers-table" class="" cellspacing="0">
                        <thead>
                            <tr>
                                <td>Con. Id</td>
                                <td>Con. Name</td>
                                <td>Cap. Volume</td>
                                <td>Min. Volume</td>
                                <td>Max. Volume</td>
                                <td>Fil. Volume</td>
                                <td>Fil. Weight</td>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (Container reciever in Model.ContainerId)
                        {
                                <tr>
                                    <td>@reciever.Id</td>
                                    <td>@reciever.ContainerName</td>
                                    <td>@reciever.CapacityVolume</td>
                                    <td>@reciever.MinimumVolume</td>
                                    <td>@reciever.MaximumVolume</td>
                                    <td>@reciever.FilledVolume</td>
                                    <td>@reciever.FilledWeight</td>
                                </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    
    </div>    
</div>


@section script{
    <script>
        var onMachineSelection= function (){
            var key = getTableSelectedRowKey($("#machines-table"));
            $("#MachineId").val(key);
        };
        var onMachineUnSelection = function () {
            $("#MachineId").val("");
        }
        var onRecieverSelection = function (){
            var key = getTableSelectedRowKey($("#recievers-table"));
            $("#ContainerId").val(key);
        };
        var onRecieverUnselection = function () {
            $("#ContainerId").val("");
        }
        var machinesTable = initiateTable1("machines-table", {
            "bLengthChange": false, "columns": [
        { "data": "DistillationMachineId" },
        { "data": "MachineName" }
        ],
            "sDom": "t",
            "language": {
                "emptyTable": "No Machines in active state."
            }
        }, onMachineSelection, onMachineUnSelection
         );

        var recieversTable = initiateTable1("recievers-table", {
            "bLengthChange": false, "columns": [
            { "data": "Id" },
            { "data": "ContainerName" },
            { "data": "CapacityVolume" },
            { "data": "MinimumVolume" },
            { "data": "MaximumVolume" },
            { "data": "FilledVolume" },
            { "data": "FilledWeight" }
            ],
            "sDom": "t",
            "language": {
                "emptyTable": "No Machines in active state."
            }
        }, onRecieverSelection, onMachineUnSelection
         );


        var onCompletion = function () {
            var sale = getTableData(machinesTable);
            var total = 0.00;
            for (var key in sale) {
                if (sale.hasOwnProperty(key)) {
                    var unitPrice = sale[key]["UnitPrice"];
                    var quantity = sale[key]["Quantity"];
                    var subTotal = unitPrice * quantity;
                    total = total + subTotal;
                }
            }


            if (total - parseInt(total) > 0) {
                // this is a float number
                if (((total - parseInt(total)) * 100) < 10 || parseInt(((total - parseInt(total)) * 100)) % 10!=0) {
                    $("#total-sale-amount").html(total + "0");
                } else {
                    $("#total-sale-amount").html(total + "0");

                }

            } else {
            $("#total-sale-amount").html(total+".00")
            }
        };

        var beforeSubmission = function () {
            var subtotal = parseFloat($("#unit-price-input").val())* parseFloat($("#quantity-input").val());
            $("#subtotal-input").val(subtotal);
        }

        //  Linking the specifications table to specifications form
        //syncFormWithTable("distillation-form", machinesTable, "ProductId", beforeSubmission, onCompletion); // connecting the table with the form
        $("#distillation-form").on('submit', function (event) {
            var data = getFormValues("distillation-form");
            sendObjectToServer("../../api/Distillation/DoubleDistill", data,
               function () {
                   showModalMessage("Distillation", "Sprit transfered to distillator for double distillation.");
               }, function (data) {
                   showModalMessage("Error", "");
               });
            event.preventDefault();
        });

        
        
        $(".navigation-help").html("Distillation / Double Distillate");

        // I said this would be CSS only
        // but I need javascript for
        // indeterminate checkboxes
        // (those with the minus)
        // so yeah that's why this is here

        $(document).ready(function () {
            $("input.idt").attr('state', '1').each(function () {
                $(this)[0].indeterminate = true;
            });
            $("input.idt").click(function () {
                var state = parseInt($(this).attr('state'));
                if (state == 0) {
                    $(this)[0].indeterminate = true;
                    $(this)[0].checked = false;
                } else if (state == 1) {
                    $(this)[0].indeterminate = false;
                    $(this)[0].checked = true;
                } else if (state == 2) {
                    $(this)[0].indeterminate = false;
                    $(this)[0].checked = false;
                    state = -1;
                }
                $(this).attr('state', ++state);
            });
        });
        $('.datepicker').pickadate({
            // Escape any “rule” characters with an exclamation mark (!).
            format: 'yyyy-mm-dd',
            selectMonths: true, // Creates a dropdown to control month
            selectYears: 15 // Creates a dropdown of 15 years to control year
        });
    </script>
}
