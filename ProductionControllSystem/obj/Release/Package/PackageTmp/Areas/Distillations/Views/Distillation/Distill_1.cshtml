@using ProductionControllSystem.Areas.Distillations.Models
@using ClassLibrary.DatabaseModels

@model  DistillationViewModel
@{
    ViewBag.Title = "Distillation of Toddy";

}

<title>@ViewBag.title</title>
<h5>@ViewBag.title</h5>

<ul class="nav nav-tabs" style="margin-bottom: 15px;">
    <li class="active"><a href="#distillations" data-toggle="tab">Distillation</a></li>
</ul>
<div id="myTabContent" class="tab-content">
    <div class="tab-pane fade active in" id="distillations">
        <div class="panel sub-content-panel col-md-12">
            <form action="no-implementation" id="distillation-form" method="POST">
                <div class="col-md-12">
                    <div id="name-group" class="form-group col-md-3">
                        <div class="col-md-12">
                            <label for="name" class="custom-label">Machine (still)</label>
                        </div>
                        <div class="input-field col-md-12">
                            @if(Model.MachineId.Count > 0)
                {

                                @Html.DropDownListFor(m => m.MachineId,
                                  new SelectList(Model.MachineId,
                               "Id", "MachineName",
                                        Model.MachineId.First().Id), new { @class = "form-control", id = "Id", name = "MachineName" })
                }
                else
                {
                                <label class="custom-label">No Machines.</label>
                }
                        </div>
                    </div>

                    <div id="name-group" class="form-group col-md-3">
                        <label for="name" class="custom-label">Date : </label>
                        <span class="input-group-addon custom-datepicker form-control">
                            <span class="glyphicon glyphicon-calendar date-icon"></span>
                            @Html.TextBoxFor(m => m.StartTime, new { @class = "datepicker custom-text-box form-control", required = "true" })
                        </span>
                    </div>

                    <div id="name-group" class="form-group col-md-3">
                        <label for="name" class="custom-label">Bulk Toddy (l):</label>
                        @Html.TextBoxFor(m => m.InputGrossVolume, new { @class = "form-control custom-text-box", required = "true", step = "0.01", min=1,  max = Model.CurrentVolume, type="number", autocomplete = "off" })
                    </div>

                    <div id="name-group" class="form-group col-md-3">
                        <label for="name" class="custom-label">Pure Toddy (l):</label>
                        @Html.TextBoxFor(m => m.InputPureVolume, new { @class = "form-control custom-text-box", step = "0.01", min = 1, max = Model.CurrentVolume, type = "number", autocomplete = "off" })
                    </div>
                </div>
                <div class="col-md-12">
                    <div id="name-group" class="form-group col-md-3 pull-right">
                        <label for="name" class="custom-label">Available Pure Toddy (l):</label>
                        @Html.TextBoxFor(m => m.CurrentPureVolume, new { @class = "form-control custom-label disabled", tabindex = "-1", required = "true", step = "0.01", autocomplete = "off" })
                    </div>
                    <div id="name-group" class="form-group col-md-3 pull-right">
                        <label for="name" class="custom-label">Available Bulk Toddy (l):</label>
                        @Html.TextBoxFor(m => m.CurrentVolume, new { @class = "form-control custom-label disabled", tabindex = "-1", required = "true", step = "0.01", autocomplete = "off" })
                    </div>
                </div>

                <div id="name-group" class="form-group col-md-12">
                    <input type="submit" class="btn btn-primary btn-raised pull-right" value="Distillate" />
                </div>
                @Html.TextBoxFor(m => m.CreatedUser, new { @class = "form-control hidden", required = "true", type = "text" })
                @Html.TextBoxFor(m => m.LocationId, new { @class = "form-control hidden", required = "true", type = "text" })
                @Html.TextBoxFor(m => m.DistillationType, new { @class = "form-control hidden", required = "true", type = "text" })
            </form>

            <div id="name-group" class="form-group col-md-12">
                <input type="submit" id="distillation-history-button" class="btn btn-warning btn-raised pull-right" value="Distillation History" />
            </div>
        </div>
        <div class="col-md-12 panel sub-content-panel hidden">
            <h5>Distillations</h5>
            <table id="distillation-table" class="display table table-hover table-striped" cellspacing="0" width="100%">
                <thead>
                </thead>
                <tbody></tbody>
                <tfoot>
                    <tr></tr>
                </tfoot>
            </table>
        </div>
    </div>
</div>
@section script
    {
    <script>
        var ev;
        $("#distillation-form").on('submit', function (event) {
            ev = event;
            console.log(event)
            if (event.which == 13) {
                return false;
            }
            var error = "";
            error = $("input[name=StartTime]").val() == "" ?'<div class="alert alert-danger col-md-12">Please enter distillation date.</div>' : error;
            error = $("select[name=MachineId]").val() == "-1" ? '<div class="alert alert-danger col-md-12">Please select machine.</div>' : error;
            error = parseFloat($("input[name=InputGrossVolume]").val()) <= parseFloat($("input[name=InputPureVolume]").val()) ? '<div class="alert alert-danger col-md-12">Bulk volume can\'t be greater or equal to pure volume.</div>' : error;
            if (error != "") {
                showModalMessage("Error", '<div class="alert alert-danger col-md-12">'+error+'</div>');
            } else {

                var data = getFormValues("distillation-form");
                var success = false;
                $.ajax({
                    type: 'post',
                    url: "../../api/Distillation/",
                    dataType: 'json',
                    data: JSON.stringify(data),
                    contentType: 'application/json',
                    success: function (response) {
                        showModalMessage("Distillation", "Toddy transfered to the machine.");
                        var toddy = parseFloat($("input[name=CurrentVolume]").val()) - parseFloat($("input[name=InputGrossVolume]").val())
                        var pureToddy = parseFloat($("input[name=CurrentPureVolume]").val()) - parseFloat($("input[name=InputPureVolume]").val())

                        $("input[name=CurrentVolume]").val(toddy);
                        $("input[name=CurrentPureVolume]").val(pureToddy);

                        $("#distillation-form input[type=submit]").addClass("disabled");
                    },
                    error: function (response) {
                        showModalMessage("Error", '<div class="alert alert-danger col-md-12">'+response +'</div>');
                    }
                });
            }
            event.preventDefault();
        });

        var machinesTable = initiateTable1("machines-table", {
            "bLengthChange": false, "columns": [
        { "data": "Id" },
        { "data": "MachineName" }
            ],
            "sDom": "t",
            "language": {
                "emptyTable": "No Machines."
            }
        }, function () { }, function () { });
        var distillationsTable = $("#distillation-table").parent().html();

        var d = new Date();
        d.setFullYear(d.getFullYear() - 100);
        $('.datepicker').pickadate({
            // Escape any “rule” characters with an exclamation mark (!).
            format: 'yyyy-mm-dd',
            selectYears: d,
            max: new Date(),
            selectMonths: true, // Creates a dropdown to control month
            selectYears: 15 // Creates a dropdown of 15 years to control year
        });

        $("input[name=Weight]").keyup(function () {
            $.ajax({
                type: 'get',
                url: "../../api/Container/Get?containerId=" + $("select[name=FromContainer]").val(),
                dataType: 'json',
                async: false,
                contentType: 'application/json',
                success: function (response) {
                    var capacity = parseFloat((typeof response["capacity"] != 'undefined' && response["capacity"] != "") ? response["capacity"] : "0");
                    var density = parseFloat((typeof response["density"] != 'undefined' && response["density"] != "") ? response["density"] : "0") / 1000;
                    var volume = parseFloat((typeof response["volumeLitres"] != 'undefined' && response["volumeLitres"] != "") ? response["volumeLitres"] : "0");
                    var weight = density * volume;
                    var weightToAdd = parseFloat($("input[name=Weight]").val());
                    weightToAdd = isNaN(weightToAdd) ? 0 : weightToAdd;
                    if (!(weight > weightToAdd)) {
                        $(this).val(weight);
                        weightToAdd = weight;
                    }
                    // set container current strength
                    $("#from-container-weight").html("Weight (kg) : " + (weight - weightToAdd) + " kg");

                    $("#from-container-capacity").html("Capacity (l) : " + capacity + " l");
                    // set container current strength
                    $("#from-container-volume").html("Volume (l) : " + volume + " l");

                    $("#liquid-percentage-from").attr("style", "width : " + ((weight - weightToAdd) / capacity) * 100 + "%;");

                },
                error: function (response) {
                    console.log("failure" + response);
                }
            });

            $.ajax({
                type: 'get',
                url: "../../api/Container/Get?containerId=" + $("select[name=ToContainer]").val(),
                dataType: 'json',
                async: false,
                contentType: 'application/json',
                success: function (response) {
                    var capacity = parseFloat((typeof response["capacity"] != 'undefined' && response["capacity"] != "") ? response["capacity"] : "0");
                    var density = parseFloat((typeof response["density"] != 'undefined' && response["density"] != "") ? response["density"] : "0") / 1000;
                    var volume = parseFloat((typeof response["volumeLitres"] != 'undefined' && response["volumeLitres"] != "") ? response["volumeLitres"] : "0");
                    var weight = density * volume;

                    var weightToAdd = parseFloat($("input[name=Weight]").val());
                    weightToAdd = isNaN(weightToAdd) ? 0 : weightToAdd;
                    // set container current strength
                    $("#to-container-weight").html("Weight (kg) : " + (weight + weightToAdd) + " kg");
                    // set container current strength
                    $("#to-container-volume").html("Volume (l) : " + volume + " l");
                    $("#to-container-capacity").html("Capacity (l) : " + capacity + " l");

                    $("#liquid-percentage-to").attr("style", "width : " + ((weight + weightToAdd) / capacity) * 100 + "%;");

                },
                error: function (response) {
                    console.log("failure" + response);
                }
            });
        });

        $('input[name=ContainerFromDepth]').change(function () {
            if ($('input[name=ContainerToDepth]').val() != '') {
                $("input[name=InputGrossVolume]").val(getVolume($(this).val(), $('input[name=ContainerToDepth]').val()));
            } else {
                $("input[name=InputGrossVolume]").val('');
            }
        });

        $('input[name=Temperature]').change(function () {
            if ($('input[name=ContainerFromDepth]').val() != '') {
                $("input[name=InputGrossVolume]").val(getVolume($('input[name=ContainerFromDepth]').val(), $(this).val()));
            } else {
                $("input[name=InputGrossVolume]").val('');
            }
        });

        var intakeData = new Array();

        $("#distillation-history-button").click(function () {
            if ($("input[name=StartTime]").val() == "") {
                showModalMessage("Error", '<div class="alert alert-danger col-md-12">Please choose a date.</div>');
            }
            if ($("#distillation-table").hasClass("dataTable")) {
                $("#distillation-table").parent().parent().html(distillationsTable)
            }

            $.ajax({
                type: 'get',
                url: "../../api/Distillation/GetDistillationForDate?date=" + $("input[name=StartTime]").val(),
                dataType: 'json',
                contentType: 'application/json',
                success: function (response) {
                    intakeData = response;
                    if (typeof (intakeData) != 'undefined' && intakeData.length > 0) {
                        $("#distillation-table").parent().removeClass("hidden");
                        initiateTable1("distillation-table",
                            {
                                "footer": true,
                                "bLengthChange": false,
                                "aaData": intakeData
                                ,
                                "aoColumns": [
                                          { "sTitle": "Date", "mData": "startTime" },
                                          { "sTitle": "Bulk input (l)", "mData": "inputGrossVolume" },
                                          { "sTitle": "Machine", "mData": "machineId" }
                                ]
                            }
                        , function () { }, function () { });
                    } else {
                        if ($("#distillation-table").hasClass("dataTable")) {
                            $("#distillation-table").parent().parent().addClass("hidden");
                            $("#distillation-table").DataTable().destroy();
                            var element = $("#distillation-table");
                            element.find("tbody").empty();
                            var div = element.parent();
                            var title = div.find("h5");
                            div.html("")
                            div.append(title);
                            div.append(element);
                            div.addClass("hidden");
                        }
                        showModalMessage("No records", "There are no toddy distillations recorded for the selected date.");
                    }
                },
                error: function (response) {
                    console.log("failure" + response);
                }
            });

        });

        $('select').each(function () {
            $(this).material_select();
            $(this).siblings("span").html("");
        });

        $('select').addClass("hidden");

        $(".navigation-help").html("Distillation / Distill");
    </script>
}
