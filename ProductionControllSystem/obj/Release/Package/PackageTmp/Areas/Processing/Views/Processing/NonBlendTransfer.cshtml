@using ClassLibrary.DatabaseModels
@using ProductionControllSystem.Models

@model  TransferLiquidViewModel

<title>@Model.View.Title</title>
<h5>@Model.View.Title</h5>
<ul class="nav nav-tabs" style="margin-bottom: 15px;">
    <li class="active"><a href="#transfer" data-toggle="tab">Transfer</a></li>
    <li><a href="#container" data-toggle="tab">Containers</a></li>
</ul>
<div id="myTabContent" class="tab-content">
    <div class="tab-pane fade active in" id="transfer">
        <div class="panel sub-content-panel col-md-12">
            <form action="no-implementation" id="source-transfer-form" method="POST">
                <div class="col-md-12">
                    <div id="name-group" class="form-group col-md-2">
                        <label for="name" class="custom-label">Vat : </label>
                        <div class="input-field">
                            @Html.DropDownListFor(m => m.Container,
                                  new SelectList(Model.Container,
                               "Id", "ContainerName",
                                        Model.Container.First().Id), new { @class = "form-control", id = "Id", name = "Container" })
                        </div>
                    </div>

                    <div id="name-group" class="form-group col-md-2">
                        <label for="name" class="custom-label">Liquid Type : </label>
                        <div class="input-field">
                            @Html.DropDownListFor(m => m.LiquidTypeId,
                                  new SelectList(Model.LiquidTypeId,
                               "LiquidTypeId", "LiquidName",
                                        Model.LiquidTypeId.First().LiquidTypeId), new { @class = "form-control disabled", id = "LiquidType", name = "LiquidTypeId", tabIndex = "-1" })
                        </div>
                    </div>

                    <div id="name-group" class="form-group col-md-2">
                        <label for="name" class="custom-label">Status : </label>
                        <div class="input-field">
                            @Html.DropDownListFor(m => m.Status,
                                  new SelectList(Model.Status,
                               "Id", "Status",
                                        Model.Status.First().Id), new { @class = "form-control", id = "Id", name = "Status" })
                        </div>
                    </div>

                    <div id="name-group" class="form-group col-md-2">
                        <label for="name" class="custom-label">Mass (Kg)</label>
                        @Html.TextBoxFor(m => m.Transfers.FirstOrDefault().Weight, new { @class = "form-control custom-text-box", required = "true", type = "number", step = "0.1", min = "1", Style = "margin-top:16px;" })
                    </div>
                    
                    <div id="name-group" class="form-group col-md-3 pull-right">
                        <label for="name" class="custom-label">Transaction Date :</label>
                        <span class="input-group-addon custom-datepicker form-control" style="width: 149px;">
                            <span class="glyphicon glyphicon-calendar date-icon"></span>
                            @Html.TextBoxFor(m => m.TransferTime, new { @class = "datepicker form-control custom-text-box", required = "true", type = "text", disabled="disabled" })
                        </span>
                    </div>

                    <input name="ToContainer" class="hidden form-control" value="@Model.DestinationContainer" />

                    <div style="clear:both" id="div2FillerOperation">
                        <div id="name-group" class="form-group col-md-3">
                            <label for="name" class="custom-label">Temperature (C)</label>
                            @Html.TextBoxFor(m => m.Transfers.FirstOrDefault().Temperature, new { @class = "form-control custom-text-box", required = "true", type = "number", step = "0.5", min = "0", max = "50" })
                        </div>

                        <div id="name-group" class="form-group col-md-3">
                            <label for="name" class="custom-label">Density (Kg/m<sup>3</sup>)</label>
                            @Html.TextBoxFor(m => m.Transfers.FirstOrDefault().Density, new { @class = "form-control custom-text-box", required = "true", type = "number", step = "0.1", min = "800", max = "1000" })
                        </div>

                        <div id="name-group" class="form-group col-md-2">
                            <label for="name" class="custom-label">Strength(%)</label>
                            @Html.TextBoxFor(m => m.Transfers.FirstOrDefault().Strength, new { @class = "form-control custom-text-box", required = "true", type = "number", step = "0.01", tabIndex = "-1", min = "1", max = "100" })
                        </div>

                        
                    </div>
                </div>
                <div class="col-md-12 green" style="background-color: rgba(76, 175, 80, 0.83)">
                    <h5>Transfer</h5>
                    <div id="name-group" class="form-group col-md-2">
                        <label for="name" class="custom-label">Bulk (l)</label>
                        @Html.TextBoxFor(m => m.Transfers.FirstOrDefault().BulkVolume, new { @class = "form-control disabled", type = "number", step = "0.1", min = "0" })
                    </div>
                    <div id="name-group" class="form-group col-md-2">
                        <label for="name" class="custom-label">A/A (l)</label>
                        @Html.TextBoxFor(m => m.Transfers.FirstOrDefault().PureVolume, new { @class = "form-control disabled", required = "true", type = "number", step = "0.1" })
                    </div>
                </div>

                <div class="col-md-12">
                    <div id="name-group" class="form-group col-md-3 pull-right ">
                        <input type="submit" style="top:40%" class="btn btn-primary btn-raised" value="Transfer" />
                    </div>

                    @Html.TextBoxFor(m => m.TransferType, new { @class = "hidden form-control " })
                    @Html.TextBoxFor(m => m.CreatedUser, new { @class = "hidden form-control " })
                    @Html.TextBoxFor(m => m.LocationId, new { @class = "hidden form-control " })

                </div>
            </form>
            <form action="no-implementation" id="liquidTransfer-form" method="POST">
                <div class="col-md-12">
                    @Html.TextBoxFor(m => m.TransferType, new { @class = "hidden form-control " })
                    @Html.TextBoxFor(m => m.CreatedUser, new { @class = "hidden form-control " })
                    @Html.TextBoxFor(m => m.LocationId, new { @class = "hidden form-control " })

                    @Html.DropDownListFor(m => m.ToContainer,
                                              new SelectList(Model.ToContainer,
                                           "Id", "ContainerName",
                                                    Model.ToContainer.First().Id), new { @class = "form-control hidden", id = "Id", name = "ToContainer" })
                </div>
            </form>
        </div>

        <div class="panel sub-content-panel col-md-12">
            <div class="col-md-6">
                <div class="col-md-6 vat_div">
                    <div class="progress vertical-sibling">
                        <div id="liquid-percentage-from" class="progress-bar  progress-bar-striped " role="progressbar" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100" style="width: 0%;">
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="row">
                        <label id="from-container-weight" style="color:black; font-size:20px" for="name" class="custom-label pull-left"></label>
                    </div>
                </div>
            </div>

            <div class="col-md-6
                 @if (Model.TransferType == "FI_A")
                 {
                     <text>hidden</text>
                 }
                     ">
                <div class="col-md-6 vat_div">
                    <div class="progress vertical-sibling">
                        <div id="liquid-percentage-to" class="progress-bar  progress-bar-striped " role="progressbar" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100" style="width:0%;">
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="row">
                        <label id="to-container-weight" style="color:black; font-size:20px" for="name" class="custom-label pull-left"></label>
                    </div>
                </div>

            </div>
        </div>
    </div>

    <div class="tab-pane fade" id="container">

        <div class="col-md-12 panel sub-content-panel pull-right">
            <h5>Vats</h5>
            <table id="vats-table" class="display table table-hover table-striped" cellspacing="0" width="100%">
                <thead>
                    <tr>
                        <th class="hidden">Id</th>
                        <th class="hidden">Container Type</th>
                        <th>Vat</th>
                        <th>Liquid</th>
                        <th>Mass (Kg)</th>
                        <th>Density (Kgm<sup>-3</sup>)</th>
                        <th>Bulk (l)</th>
                        <th>Strength</th>
                        <th>A/A(l)</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Container reciever in Model.Container)
                    {
                        if (decimal.Parse(reciever.Id) > 0)
                        {
                            <tr>
                                <td class="hidden">
                                    @reciever.Id
                                </td>
                                <td class="hidden">
                                    @reciever.ContainerType
                                </td>
                                <td>
                                    @reciever.ContainerName
                                </td>
                                <td>
                                    @if (reciever.FilledWeight == 0)
                                    {
                                        <text>Empty</text>
                                    }
                                    else
                                    {
                                        if (Model.LiquidTypeId.Find(l => l.LiquidTypeId == reciever.LiquidTypeId) != null)
                                        {
                                            @Model.LiquidTypeId.Find(l => l.LiquidTypeId == reciever.LiquidTypeId).LiquidName
                                        }
                                        else
                                        {
                                            <text>Empty</text>
                                        }
                                    }
                                </td>
                                <td>
                                    @reciever.FilledWeight
                                </td>
                                <td>
                                    @reciever.Density
                                </td>
                                <td>
                                    @reciever.FilledVolume
                                </td>
                                <td>
                                    @reciever.Strength
                                </td>
                                <td>
                                    @reciever.PureVolume
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section script
    {
    <script>
        var fromContainer = null;
        var toContainer = null;

        $("#source-transfer-form").on('submit', function (event) {
            var error = "";
            error = $("input[name=TransferTime]").val() == "" ? error + "Please enter date." : error;

            if (error != "") {
                showModalMessage("Error", error);
            } else {
                var data = getFormValues("liquidTransfer-form");
                var transfers = getFormValues("source-transfer-form");
                data["Transfers"] = new Array();
                data["Transfers"].push(transfers);
                sendObjectToServer("../../@Model.View.PostUrl", data,
                   function () {
                       showModalMessage("@Model.View.SuccessMessageTitle", "@Model.View.SuccessMessage");
                       $("#source-transfer-form").addClass("disabled");
                       $("#source-transfer-form input[type=submit]").addClass("btn-default");
                       $("#source-transfer-form input[type=submit]").removeClass("btn-primary");

                   }, function (data) {
                       showModalMessage("@Model.View.FailureMessageTitle", "@Model.View.FailureMessage" + data);
                   });
            }
            event.preventDefault();
        });

        var d = new Date();
        d.setFullYear(d.getFullYear() - 100);
        $('.datepicker').pickadate({
            // Escape any “rule” characters with an exclamation mark (!).
            format: 'yyyy-mm-dd',
            selectYears: d,
            max: new Date(),
            selectMonths: true, // Creates a dropdown to control month
            selectYears: 15 // Creates a dropdown of 15 years to control year
        });

        var $input = $('.datepicker').pickadate()
        var picker = $input.pickadate('picker');
        picker.set('disable', true)

        $("select[name=Container]").change(function () {
            $.ajax({
                type: 'get',
                url: "../../api/Container/Get?containerId=" + $(this).val(),
                dataType: 'json',
                async: false,
                contentType: 'application/json',
                success: function (response) {
                    fromContainer = response;
                    // Set field values based on the selected container
                    var density = 0;
                    var capacity = 0;
                    var current = 0;
                    density = !isNaN($("#source-transfer-form input[name=Density]").val()) ? parseFloat($("#source-transfer-form input[name=Density]").val()) : 0;

                    switch ("@Model.TransferUnit") {
                        case "kg":
                            capacity = parseFloat((typeof fromContainer["capacityWeight"] != 'undefined' && fromContainer["capacityWeight"] != "") ? fromContainer["capacityWeight"] : "0");
                            current = parseFloat((typeof fromContainer["fillWeight"] != 'undefined' && fromContainer["fillWeight"] != "") ? fromContainer["fillWeight"] : "0");
                            break;
                        case "l":
                            capacity = parseFloat((typeof fromContainer["capacityVolume"] != 'undefined' && fromContainer["capacityVolume"] != "") ? fromContainer["capacityVolume"] : "0");
                            current = parseFloat((typeof fromContainer["fillVolume"] != 'undefined' && fromContainer["fillVolume"] != "") ? fromContainer["fillVolume"] : "0");
                            break;
                        default:
                            break;
                    }
                    current = !isNaN(current) ? current : 0;
                    capacity = !isNaN(capacity) ? capacity : 0;
                    MaterialSelectReinitiate("select[name=LiquidTypeId]", fromContainer["liquidTypeId"]);
                    $("#liquid-percentage-from").attr("style", "width : " + (((current) / capacity) * 100).toFixed(2) + "%;");
                    $("#source-transfer-form input[name=Weight").val("");
                    $("#source-transfer-form input[name=BulkVolume").val("");
                    @switch (Model.TransferType)
                            {
                            case "FI_A":
                            <text>
                    //$("#source-transfer-form input[name=Weight").attr("max", fromContainer["fillWeight"]);
                    //$("#source-transfer-form input[name=BulkVolume").attr("max", fromContainer["fillVol"]);
                    </text>
                            break;
                            case "FI_B":
                            <text>
                    //$("#source-transfer-form input[name=Weight").attr("max", fromContainer["fillWeight"]);
                    //$("#source-transfer-form input[name=BulkVolume").attr("max", fromContainer["fillVol"]);
                    </text>
                            break;
                            default:
                            <text>
                    $("#source-transfer-form input[name=BulkVolume").attr("max", getMaximumTransferValue());
                    $("#source-transfer-form input[name=Weight").attr("max", getMaximumTransferValue());
                    </text>
                            break;
                            }
                    $("#source-transfer-form input[name=Temperature").val("");
                    $("#source-transfer-form input[name=Density").val("");
                    $("#source-transfer-form input[name=Strength").val("");
                    $("#from-container-weight").html("Current (@Model.TransferUnit) : " + current + " @Model.TransferUnit");
                },
                error: function (response) {
                    console.log("failure" + response);
                }
            });
        });


        $("select[name=ToContainer]").change(function () {
            $.ajax({
                type: 'get',
                url: "../../api/Container/Get?containerId=" + $(this).val(),
                dataType: 'json',
                async: false,
                contentType: 'application/json',
                success: function (response) {
                    toContainer = response;
                    var capacity = 0;
                    var currentFilled = 0;

                    var density = !isNaN($("#source-transfer-form input[name=Density]").val()) ? parseFloat($("#source-transfer-form input[name=Density]").val()) : 0;
                    switch ("@Model.TransferUnit") {
                        case "l":
                            capacity = parseFloat((typeof toContainer["capacityVolume"] != 'undefined' && toContainer["capacityVolume"] != "") ? toContainer["capacityVolume"] : "0");
                            currentFilled = parseFloat((typeof toContainer["fillVolume"] != 'undefined' && toContainer["fillVolume"] != "") ? toContainer["fillVolume"] : "0");
                            break;
                        case "kg":
                            capacity = parseFloat((typeof toContainer["capacityWeight"] != 'undefined' && toContainer["capacityWeight"] != "") ? toContainer["capacityWeight"] : "0");
                            currentFilled = parseFloat((typeof toContainer["fillWeight"] != 'undefined' && toContainer["fillWeight"] != "") ? toContainer["fillWeight"] : "0");
                            break;
                        default:
                            break;
                    }
                    currentFilled = !isNaN(currentFilled) ? currentFilled : 0;
                    capacity = !isNaN(capacity) ? capacity : 0;

                    $("#to-container-weight").html("Current (@Model.TransferUnit) : " + currentFilled + " " + "@Model.TransferUnit");
                    $("#liquid-percentage-to").attr("style", "width : " + (((currentFilled) / capacity) * 100).toFixed(2) + "%;");
                    $("#source-transfer-form input[name=Weight").val("");
                    $("#source-transfer-form input[name=BulkVolume").val("");
                    $("#source-transfer-form input[name=Weight").attr("max", getMaximumTransferValue());
                    $("#source-transfer-form input[name=BulkVolume").attr("max", getMaximumTransferValue());
                    $("#source-transfer-form input[name=Temperature").val("");
                    $("#source-transfer-form input[name=Density").val("");
                    $("#source-transfer-form input[name=Strength").val("");
                },
                error: function (response) {
                    console.log("failure" + response);
                }
            });
        });

        $("#source-transfer-form input[name=Weight]").change(function () {
            if (fromContainer != null) {
                var weight = parseFloat((typeof fromContainer["capacityWeight"] != 'undefined' && fromContainer["capacityWeight"] != "") ? fromContainer["capacityWeight"] : "0");
                var currentWeight = parseFloat((typeof fromContainer["fillWeight"] != 'undefined' && fromContainer["fillWeight"] != "") ? fromContainer["fillWeight"] : "0");

                currentWeight = !isNaN(currentWeight) ? currentWeight : 0;
                weight = !isNaN(weight) ? weight : 0;
                var addedWeight = !isNaN(parseFloat($(this).val())) ? parseFloat($(this).val()) : 0;
                currentWeight -= addedWeight;

                $("#liquid-percentage-from").attr("style", "width : " + (((currentWeight) / weight) * 100).toFixed(2) + "%;");
            }
            if (toContainer != null) {
                var weight = parseFloat((typeof toContainer["capacityWeight"] != 'undefined' && toContainer["capacityWeight"] != "") ? toContainer["capacityWeight"] : "0");
                var currentWeight = parseFloat((typeof toContainer["fillWeight"] != 'undefined' && toContainer["fillWeight"] != "") ? toContainer["fillWeight"] : "0");

                currentWeight = !isNaN(currentWeight) ? currentWeight : 0;
                weight = !isNaN(weight) ? weight : 0;
                var addedWeight = !isNaN(parseFloat($(this).val())) ? parseFloat($(this).val()) : 0;
                currentWeight += addedWeight;
                $("#liquid-percentage-to").attr("style", "width : " + (((currentWeight) / weight) * 100).toFixed(2) + "%;");

                $("#to-container-weight").html("Cur. Weight (kg) : " + currentWeight + " kg");
            }
        })

        $("#source-transfer-form input[name=BulkVolume]").keyup(function () {
            if (fromContainer != null) {
                var weight = parseFloat((typeof fromContainer["capacityVolume"] != 'undefined' && fromContainer["capacityWeight"] != "") ? fromContainer["capacityVolume"] : "0");
                var currentWeight = parseFloat((typeof fromContainer["fillVolume"] != 'undefined' && fromContainer["fillVolume"] != "") ? fromContainer["fillVolume"] : "0");

                currentWeight = !isNaN(currentWeight) ? currentWeight : 0;
                weight = !isNaN(weight) ? weight : 0;
                var addedWeight = !isNaN(parseFloat($(this).val())) ? parseFloat($(this).val()) : 0;
                currentWeight -= addedWeight;

                $("#liquid-percentage-from").attr("style", "width : " + (((currentWeight) / weight) * 100).toFixed(2) + "%;");

                $("#from-container-weight").html("Cur. Weight (kg) : " + currentWeight + " kg");
            }
            if (toContainer != null) {
                var weight = parseFloat((typeof toContainer["capacityVolume"] != 'undefined' && toContainer["capacityVolume"] != "") ? toContainer["capacityVolume"] : "0");
                var currentWeight = parseFloat((typeof toContainer["fillVolume"] != 'undefined' && toContainer["fillVolume"] != "") ? toContainer["fillVolume"] : "0");

                currentWeight = !isNaN(currentWeight) ? currentWeight : 0;
                weight = !isNaN(weight) ? weight : 0;
                var addedWeight = !isNaN(parseFloat($(this).val())) ? parseFloat($(this).val()) : 0;
                currentWeight += addedWeight;
                $("#liquid-percentage-to").attr("style", "width : " + (((currentWeight) / weight) * 100).toFixed(2) + "%;");

                $("#to-container-weight").html("Cur. Weight (kg) : " + currentWeight + " kg");
            }
        })

        function getMaximumTransferValue() {
            var maxWeight = 12900;
            var fromContainerCapacity = 0;
            var fromContainerFilled = 0;
            var toContainerCapacity = 0;
            var toContainerFilled = 0;
            switch ("@Model.TransferUnit") {
                case "kg":
                    if (fromContainer != null) {
                        fromContainerCapacity = !isNaN(parseFloat(fromContainer["capacityWeight"])) ? parseFloat(fromContainer["capacityWeight"]) : 0;
                        fromContainerFilled = !isNaN(parseFloat(fromContainer["fillWeight"])) ? parseFloat(fromContainer["fillWeight"]) : 0;
                    }
                    if (toContainer != null) {
                        toContainerCapacity = !isNaN(parseFloat(toContainer["capacityWeight"])) ? parseFloat(toContainer["capacityWeight"]) : 0;
                        toContainerFilled = !isNaN(parseFloat(toContainer["fillWeight"])) ? parseFloat(toContainer["fillWeight"]) : 0;
                    }
                    maxWeight = (toContainerCapacity - toContainerFilled) < fromContainerFilled ? (toContainerCapacity - toContainerFilled) : fromContainerFilled;
                    break;
                case "l":
                    if (fromContainer != null) {
                        fromContainerCapacity = !isNaN(parseFloat(fromContainer["capacityVolume"])) ? parseFloat(fromContainer["capacityVolume"]) : 0;
                        fromContainerFilled = !isNaN(parseFloat(fromContainer["fillVolume"])) ? parseFloat(fromContainer["fillVolume"]) : 0;
                    }
                    if (toContainer != null) {
                        toContainerCapacity = !isNaN(parseFloat(toContainer["capacityVolume"])) ? parseFloat(toContainer["capacityVolume"]) : 0;
                        toContainerFilled = !isNaN(parseFloat(toContainer["fillVolume"])) ? parseFloat(toContainer["fillVolume"]) : 0;
                    }
                    maxWeight = (toContainerCapacity - toContainerFilled) < fromContainerFilled ? (toContainerCapacity - toContainerFilled) : fromContainerFilled;
                    break;
                default:
                    break;
            }
            return maxWeight;
        }

        $('input[name=Density]').change(function () {
            var density = parseFloat($(this).val());
            var mass = parseFloat($("#source-transfer-form input[name=Weight]").val());

            if (!(density > 0 && mass > 0))
                return;

            if (!isNaN(parseFloat($("#source-transfer-form input[name=Temperature]").val()))) {
                var strength = getStrength(density, $('input[name=Temperature]').val());
                strength = !isNaN(parseFloat(strength)) ? parseFloat(strength) : 0;

                $("#source-transfer-form input[name=Strength]").val(strength);
                $("#source-transfer-form input[name=BulkVolume]").val(parseFloat((mass * 1000 / density).toFixed(1)));
                $("#source-transfer-form input[name=PureVolume]").val(parseFloat(parseFloat((mass * 1000 / density).toFixed(1) * strength / 100)).toFixed(1));
            } else {
                $("#source-transfer-form input[name=Strength]").val('');
            }
        });

        $('input[name=Strength]').change(function () {
            var strength = parseFloat($(this).val());
            var mass = parseFloat($("#source-transfer-form input[name=Weight]").val());
            var density = parseFloat($("#source-transfer-form input[name=Density]").val());

            if (!(strength > 0 && mass > 0 && density > 0))
                return;

            if (!isNaN(parseFloat($("#source-transfer-form input[name=Density]").val()))) {
                var temperature = getTemperature($('input[name=Density]').val(), strength);
                strength = !isNaN(parseFloat(strength)) ? parseFloat(strength) : 0;

                $("#source-transfer-form input[name=Temperature]").val(temperature);
                $("#source-transfer-form input[name=BulkVolume]").val(parseFloat((mass * 1000 / density).toFixed(1)));
                $("#source-transfer-form input[name=PureVolume]").val(parseFloat(parseFloat((mass * 1000 / density).toFixed(1) * strength / 100)).toFixed(1));
            } else {
                $("#source-transfer-form input[name=Strength]").val(0);
            }
        });

        $('input[name=Temperature]').change(function () {
            var density = parseFloat($("#source-transfer-form input[name=Density]").val());
            var mass = parseFloat($("#source-transfer-form input[name=Weight]").val());

            if (!(density > 0 && mass > 0))
                return;

            if (!isNaN(parseFloat($("#source-transfer-form input[name=Temperature]").val()))) {
                var strength = getStrength(density, $('input[name=Temperature]').val());
                strength = !isNaN(parseFloat(strength)) ? parseFloat(strength) : 0;

                $("#source-transfer-form input[name=Strength]").val(strength);
                $("#source-transfer-form input[name=BulkVolume]").val(parseFloat((mass * 1000 / density).toFixed(1)));
                $("#source-transfer-form input[name=PureVolume]").val(parseFloat(parseFloat((mass * 1000 / density).toFixed(1) * strength / 100)).toFixed(1));
            } else {
                $("#source-transfer-form input[name=Strength]").val('');
            }
        });
        var receiversTable = initiateTable1("vats-table",
    {
        "footer": true,
        "bLengthChange": false
    }
, function () { }, function () { });
        $('select').each(function () {
            $(this).material_select();
            $(this).siblings("span").html("");
        });
        $('select').addClass("hidden");
        $(".navigation-help").html("Vats / @Model.View.Title");
    </script>
}
