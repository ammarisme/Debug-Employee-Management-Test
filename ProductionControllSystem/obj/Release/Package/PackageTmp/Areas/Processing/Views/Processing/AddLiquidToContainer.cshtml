
@using ProductionControllSystem.Areas.Processing.Models
@using ClassLibrary.DatabaseModels
@model  AddLiquidToContainerViewModel

<script src="~/Scripts/mdDateTimePicker.js"></script>
<title>@Model.View.Title</title>
<h5>@Model.View.Title</h5>

<ul class="nav nav-tabs" style="margin-bottom: 15px;">
    <li class="active"><a href="#intakes" data-toggle="tab">Intake</a></li>
    <li><a href="#containers-tab" data-toggle="tab">Vats</a></li>
</ul>
<div id="myTabContent" class="tab-content">
    <div class="tab-pane fade active in" id="intakes">
        <div class="panel sub-content-panel col-md-12">
            <form action="no-implementation" id="liquidInput-form" method="POST">
                <div class="col-md-12">
                    <div id="name-group" class="form-group col-md-2">
                        <label for="name" class="custom-label">Source: </label>
                        <div class="input-field">
                            @Html.DropDownListFor(m => m.FromContainer,
                                  new SelectList(Model.FromContainer,
                               "Id", "ContainerName",
                                        Model.FromContainer.First().Id), new { @class = "form-control", id = "Id", name = "ContainerName" })
                        </div>
                    </div>

                    <div id="name-group" class="form-group col-md-2">
                        <label for="name" class="custom-label">Reciveing Vat: </label>
                        <div class="input-field">
                            @Html.DropDownListFor(m => m.ToContainer,
                                  new SelectList(Model.ToContainer,
                               "Id", "ContainerName",
                                        Model.ToContainer.First().Id), new { @class = "form-control", id = "Id", name = "ContainerName" })
                        </div>
                    </div>
                    <div id="name-group" class="form-group col-md-2">
                        <label for="name" class="custom-label">Liquid Type : </label>
                        <div class="input-field" id="liquid-type-select">
                            @Html.DropDownListFor(m => m.LiquidTypeId,
                                  new SelectList(Model.LiquidTypeId,
                               "LiquidTypeId", "LiquidName",
                                        Model.LiquidTypeId.First().LiquidTypeId), new { @class = "form-control", id = "LiquidType", name = "LiquidName" })
                        </div>
                    </div>
                    <div id="name-group" class="form-group col-md-2">
                        <label for="name" class="custom-label">Mass (Kg)</label>
                        @Html.TextBoxFor(m => m.DestinationWeight, new { @class = "form-control custom-text-box", required = "true", type = "number", step = "0.1", min = 1 , Style= "margin-top: 19px;" })
                    </div>
                    <div id="name-group" class="form-group col-md-2"  tabindex="-1">
                        <label for="name" class="custom-label">Date</label>
                        <span class="input-group-addon custom-datepicker form-control" style="position: relative;top: 10px;">
                            <span class="glyphicon glyphicon-calendar date-icon"></span>
                            @Html.TextBoxFor(m => m.TransferTime, new { @class = "datepicker form-control custom-text-box", required = "true", type = "text", disabled = "disabled" })
                        </span>
                    </div>
                    </div>
                <div class="col-md-12" id="div2Intake">
                    <div id="name-group" class="form-group col-md-2">
                        <label for="name" class="custom-label">TT number : </label>
                        @Html.TextBoxFor(m => m.LocationTransfer.TankTainerNumber, new { @class = "form-control custom-text-box",  type = "text"})
                    </div>
                    <div id="name-group" class="form-group col-md-3">
                        <label for="name" class="custom-label">Temperature (C)</label>
                        @Html.TextBoxFor(m => m.DestinationTemperature, new { @class = "form-control custom-text-box", required = "true", type = "number", step = "0.5", min = 1 })
                    </div>
                    <div id="name-group" class="form-group col-md-3">
                        <label for="name" class="custom-label">Density (Kg/m<sup>3</sup>)</label>
                        @Html.TextBoxFor(m => m.DestinationDensity, new { @class = "form-control custom-text-box", required = "true", type = "number", step = "0.1", min = 1 })
                    </div>
                    <div id="name-group" class="form-group col-md-2">
                        <label for="name" class="custom-label">Strength</label>
                        @Html.TextBoxFor(m => m.DestinationStrength, new { @class = "form-control custom-text-box" })
                    </div>
                </div>
                <div class="col-md-12" style="background-color: rgba(76, 175, 80, 0.83)">
                    <div id="name-group" class="form-group col-md-2">
                        <label for="name" class="custom-label">Bulk (l)</label>
                        @Html.TextBoxFor(m => m.DestinationBulkVolume, new { @class = "form-control disabled", tabIndex = "-1" })
                    </div>
                    <div id="name-group" class="form-group col-md-2">
                        <label for="name" class="custom-label">A/A (l)</label>
                        @Html.TextBoxFor(m => m.DestinationPureVolume, new { @class = "form-control disabled", tabIndex = "-1" })
                    </div>
                </div>
                @Html.TextBoxFor(m => m.LocationId, new { @class = "form-control hidden" })
                @Html.TextBoxFor(m => m.CreatedUser, new { @class = "form-control hidden" })

                    <div class="col-md-12">
                     
                        <div id="name-group" class="form-group col-md-4 pull-right">
                            <input type="submit" class="btn btn-primary btn-raised pull-right" value="Add Liquid" />
                        </div>
                    </div>
            </form>
        </div>

        <div class="panel sub-content-panel col-md-12">
            <div class="col-md-6 vat_div">
                <div class="progress vertical">
                    <div id="liquid-percentage" class="progress-bar  progress-bar-striped " role="progressbar" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100" style="width: 0%;">
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div id="name-group" class="form-group col-md-5">
                    <label for="name" class="custom-label">Total Bulk(Kg)</label>
                    @Html.TextBoxFor(m => m.TotalBulkWeight, new { @class = "form-control disabled", required = "true", type = "number", step = "0.1", tabIndex = "-1", min = 1 })
                </div>
            </div>
        </div>
    </div>

    <div class="tab-pane fade" id="containers-tab">
        <div class="col-md-12 panel sub-content-panel pull-right">
            <h5>Vats</h5>
            <table id="recievers-table" class="display table table-hover table-striped" cellspacing="0" width="100%">
                <thead>
                    <tr>
                        <th>Reciever</th>
                        <th>Mass (Kg)</th>
                        <th>Bulk(l)</th>
                        <th>Strength</th>
                        <th>A/A(l)</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Container reciever in Model.ToContainer)
                    {
                        if (reciever.Id != "-1")
                        {
                            <tr>
                                <td>
                                    @reciever.ContainerName
                                </td>
                                <td>
                                    @reciever.FilledWeight
                                </td>
                                <td>
                                    @reciever.FilledVolume
                                </td>
                                <td>
                                    @reciever.Strength
                                </td>
                                <td>
                                    @reciever.PureVolume
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
@section script
    {
    <script>
        var container = null;

        $("#liquidInput-form").on('submit', function (event) {
            var error = "";
            error = $("input[name=DestinationStrength]").val() == "0" ? error + "</br>Please enter temperature and density." : error;
            error = $("input[name=TransferTime]").val() == "" ? error + "</br>Please enter date." : error;
            error = $("select[name=ToContainer]").val() == "0" ? error + "</br>Please select a recieving vat." : error;
            error = $("select[name=FromContainer]").val() == "0" ? error + "</br>Please select a source vat." : error;
            error = $("select[name=LiquidTypeId]").val() == "0" ? error + "</br>Please select the liquid." : error;


            if (error != "") {
                showModalMessage("Error", error);
            } else {
                var data = getFormValues("liquidInput-form");
                data["LocationTransfer"] = {
                    "VehicleId": data["Vehicle"],
                    "FromLocation": data["FromContainer"],
                    "ToLocation": data["ToContainer"],
                    "LocationId" : "@Model.LocationId",
                    "CreatedUser" : "@Model.CreatedUser",
                    "Weight" : data["DestinationWeight"],
                    "LiquidType": data["LiquidType"],
                    "TankTainerNumber": data["LocationTransfer.TankTainerNumber"],
                    "Volume" : data["DestinationBulkVolume"]
                };
                // following fields need to be populated.
                sendObjectToServer("@Model.View.PostUrl", data,
                   function () {
                       showModalMessage("@Model.View.SuccessMessageTitle", "@Model.View.SuccessMessage");
                   }, function (data) {
                       showModalMessage("@Model.View.FailureMessageTitle", data);
                   });
            }
            event.preventDefault();
        });

        $("select[name=ToContainer]").change(function () {
            var containerId = $(this).val();
            container = getContainerFromDb(containerId);
            updateForm(container);
        });

        //$("input").keyup(function () {
        //    updateForm(container);
        //});

        $("input[name=DestinationStrength]").on("change", function () {
            var strength = $("input[name=DestinationStrength]").val();
            var density = $("input[name=DestinationDensity]").val();
            var temperature = getTemperature(density, strength);
            strength = !isNaN(parseFloat(strength)) ? parseFloat(strength) : 0;
            density = !isNaN(parseFloat(density)) ? parseFloat(density) : 0;
            temperature = !isNaN(parseFloat(temperature)) ? parseFloat(temperature) : 0;
            if (strength * density == 0) {
                return;
            }
            $("input[name=DestinationDensity]").val(density);
            $("input[name=DestinationTemperature]").val(temperature);
            $("input[name=DestinationStrength]").val(strength);
        });

        $("input[name=DestinationTemperature]").on("change", function () {
            var temperature= $("input[name=DestinationTemperature]").val();
            var density = $("input[name=DestinationDensity]").val();
            var strength = getStrength(density, temperature);
            strength = !isNaN(parseFloat(strength)) ? parseFloat(strength) : 0;
            density = !isNaN(parseFloat(density)) ? parseFloat(density) : 0;
            temperature = !isNaN(parseFloat(temperature)) ? parseFloat(temperature) : 0;

            if (temperature* density == 0) {
                return;
            }

            $("input[name=DestinationDensity]").val(density);
            $("input[name=DestinationTemperature]").val(temperature);
            $("input[name=DestinationStrength]").val(strength);

            updateForm();
        });

        $("input[name=DestinationDensity]").on("change", function () {
            var temperature = $("input[name=DestinationTemperature]").val();
            var density = $("input[name=DestinationDensity]").val();
            var strength = getStrength(density, temperature);
            strength = !isNaN(parseFloat(strength)) ? parseFloat(strength) : 0;
            density = !isNaN(parseFloat(density)) ? parseFloat(density) : 0;
            temperature = !isNaN(parseFloat(temperature)) ? parseFloat(temperature) : 0;

            if (temperature * density == 0) {
                return;
            }

            $("input[name=DestinationDensity]").val(density);
            $("input[name=DestinationTemperature]").val(temperature);
            $("input[name=DestinationStrength]").val(strength);

            updateForm();
        });

        $("input[name=DestinationWeight]").on("change", function () {
            if (parseFloat($(this).val()) > 0) {
            updateForm();
            }
        });


        function updateForm(container) {
            var strength = !isNaN(parseFloat($("input[name=DestinationStrength]").val())) ? parseFloat($("input[name=DestinationStrength]").val()) : 0;
            var density = !isNaN(parseFloat($("input[name=DestinationDensity]").val())) ? parseFloat($("input[name=DestinationDensity]").val()) : 0;
            var weight = !isNaN(parseFloat($("input[name=DestinationWeight]").val())) ? parseFloat($("input[name=DestinationWeight]").val()) : 0;
            fillWeight = container != null ? (container["fillWeight"] + weight) : weight;
            capacityWeight = container != null ? container["capacityWeight"] : 1;   
           
            var bulkVolume = ((weight/density)*1000).toFixed(1);
            var pureVolume = ((parseFloat(bulkVolume) * strength) / 100).toFixed(1);

            $("input[name=DestinationBulkVolume]").val(bulkVolume);
            $("input[name=DestinationPureVolume]").val(pureVolume);
            $("input[name=TotalBulkWeight]").val(fillWeight);
            $("#liquid-percentage").attr("style", "width : " + ((fillWeight / capacityWeight) * 100).toFixed(1) + "%;");
        }

        // User interface initialization
        var recieversTable = initiateTable1("recievers-table", {
            "bLengthChange": false,
            "language": {
                "emptyTable": "No Recievers available."
            }
        }, function () { }, function () { });

        
        var d = new Date();
        d.setFullYear(d.getFullYear() - 100);
        $('.datepicker').pickadate({
            // Escape any “rule” characters with an exclamation mark (!).
            format: 'yyyy-mm-dd',
            selectYears: d,
            max: new Date(),
            selectMonths: true, // Creates a dropdown to control month
            selectYears: 15 // Creates a dropdown of 15 years to control year
        });

        var $input = $('.datepicker').pickadate()
        var picker = $input.pickadate('picker');
        picker.set('disable', true)

        $('select').each(function () {
            $(this).material_select();
            $(this).siblings("span").html("");
        });
        $('select').addClass("hidden");
       
        
        $(".navigation-help").html("Processing / @Model.View.Title ");

        
    </script>
}