@using ProductionControllSystem.Areas.Containers.Models;

@model  TransferLiquidViewModel
@{
    ViewBag.Title = "Transfer Liquid";
}

<title>@ViewBag.title</title>
<h5>@ViewBag.title</h5>

<form action="no-implementation" id="liquidTransfer-form" method="POST">
    <div class="panel sub-content-panel col-md-5 pull-left">
        <div id="name-group" class="form-group col-md-12">
            <div class="col-md-12">
            <label for="name" class="custom-label">From Container : </label>
            </div>
            <div class="col-md-12 input-field" >
            @Html.DropDownListFor(m => m.FromContainer,
                                  new SelectList(Model.FromContainer,
                               "Id", "ContainerName",
                                        Model.FromContainer.First().Id), new { @class = "form-control ", id = "Id", name= "FromContainer" })
            </div>
        </div>

        <div class="col-md-12" id="liquid-percentage-from">
            <div class="col-md-6 vat_div">
                <div class="progress vertical-sibling">
                    <div class="progress-bar progress-bar-one progress-bar-striped " role="progressbar" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"></div>
                    <div class="progress-bar progress-bar-two progress-bar-striped " role="progressbar" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100" style="width: 0%;background-color:black"></div>
                </div>
            </div>
            <div class="col-md-6">
            </div>
        </div>

        <div id="name-group" class="form-group col-md-6">
            <label for="name" class="custom-label">Current Depth (l)</label>
            @Html.TextBoxFor(m => m.SourceDepthFrom, new { @class = "form-control disabled", required = "true", type = "number" , step="0.01" })
        </div>

        <div id="name-group" class="form-group col-md-6">
            <label for="name" class="custom-label">Surface Level(l)</label>
            @Html.TextBoxFor(m => m.SourceDepthTo, new { @class = "form-control custom-text-box", required = "true", type = "number" , step="0.01" })
        </div>

        <div id="name-group" class="form-group col-md-6">
            <label for="name" class="custom-label">Temperature (C)</label>
            @Html.TextBoxFor(m => m.SourceTemperature, new { @class = "form-control custom-text-box", required = "true", type = "number" , step="0.01" })
        </div>

        <div id="name-group" class="form-group col-md-6">
            <label for="name" class="custom-label">Density (Kg/l)</label>
            @Html.TextBoxFor(m => m.SourceDensity, new { @class = "form-control custom-text-box", required = "true", type = "number" , step="0.01" })
        </div>

        <div id="name-group" class="form-group col-md-6">
            <label for="name" class="custom-label">Strength</label>
            @Html.TextBoxFor(m => m.SourceStrength, new { @class = "form-control disabled", required = "true", type = "number" , step="0.01" })
        </div>

        <div id="name-group" class="form-group col-md-6">
                <label for="name" class="custom-label">Bulk (l):</label>
                @Html.TextBoxFor(m => m.SourceBulkVolume, new { @class = "form-control disabled", required = "true", type = "number" , step="0.01" })
        </div>

        <div id="name-group" class="form-group col-md-6">
                <label for="name" class="custom-label">SourceWeight</label>
                @Html.TextBoxFor(m => m.SourceWeight, new { @class = "form-control disabled", required = "true", type = "number" , step="0.01" })
        </div>
    </div>

    <div class="panel sub-content-panel col-md-5 pull-right">

        <div id="name-group" class="form-group col-md-12">
            <div class="col-md-12">
            <label for="name" class="custom-label">To Container : </label>
            </div>
            <div class="col-md-12">
            @Html.DropDownListFor(m => m.ToContainer,
                                  new SelectList(Model.ToContainer,
                               "Id", "ContainerName",
                                        Model.FromContainer.First().Id), new { @class = "form-control", id = "Id", name = "ToContainer" })
            </div>
        </div>

        <div class="col-md-12" id="liquid-percentage-to" >
            <div class="col-md-6 vat_div">
                <div class="progress vertical-sibling">
                    <div class="progress-bar progress-bar-one progress-bar-striped " role="progressbar" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"> </div>
                    <div class="progress-bar progress-bar-two progress-bar-striped " role="progressbar" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"> </div>
                </div>
            </div>
            <div class="col-md-6">
            </div>
        </div>

        <div id="name-group" class="form-group col-md-6">
            <label for="name" class="custom-label">Current Depth (l)</label>
            @Html.TextBoxFor(m => m.DestinationDepthFrom, new { @class = "form-control disabled", required = "true", type = "number" , step="0.01" })
        </div>

        <div id="name-group" class="form-group col-md-6">
            <label for="name" class="custom-label">Surface Level (l)</label>
            @Html.TextBoxFor(m => m.DestinationDepthTo, new { @class = "form-control custom-text-box", required = "true", type = "number" , step="0.01" })
        </div>

        <div id="name-group" class="form-group col-md-6">
            <label for="name" class="custom-label">Temperature (C)</label>
            @Html.TextBoxFor(m => m.DestinationTemperature, new { @class = "form-control custom-text-box", required = "true", type = "number" , step="0.01" })
        </div>

        <div id="name-group" class="form-group col-md-6">
            <label for="name" class="custom-label">Density (Kg/l)</label>
            @Html.TextBoxFor(m => m.DestinationDensity, new { @class = "form-control custom-text-box", required = "true", type = "number" , step="0.01" })
        </div>

        <div id="name-group" class="form-group col-md-6">
            <label for="name" class="custom-label">Strength</label>
            @Html.TextBoxFor(m => m.DestinationStrength, new { @class = "form-control disabled", required = "true", type = "number" , step="0.01" })
        </div>


        <div id="name-group" class="form-group col-md-6">
                <label for="name" class="custom-label">Bulk (l):</label>
                @Html.TextBoxFor(m => m.DestinationBulkVolume, new { @class = "form-control disabled", required = "true", type = "number" , step="0.01" })
        </div>

        <div id="name-group" class="form-group col-md-6">
                <label for="name" class="custom-label">DestinationWeight</label>
                @Html.TextBoxFor(m => m.DestinationWeight, new { @class = "form-control disabled", required = "true", type = "number" , step="0.01" })
        </div>


    </div>

    <div class="panel sub-content-panel col-md-12">

        <div class="col-md-6">
                <div id="name-group" class="form-group col-md-12">
                    <div class="col-md-8">
                        <label for="name" class="custom-label">Wastage</label>
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(m => m.Wastage, new { @class = "form-control disabled", required = "true", type = "text" })
                    </div>
                </div>
                <div id="name-group" class="form-group col-md-12">
                    <div class="col-md-8">
                        <label for="name" class="custom-label">Liquid Type</label>
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(m => m.LiquidTypeId, new { @class = "form-control disabled", required = "true", type = "text" })
                    </div>
                </div>
                <div class="hidden">
                    @Html.TextBoxFor(m => m.CreatedUser, new { @class = "form-control hidden", required = "true", type = "text" })
                    @Html.TextBoxFor(m => m.TransferType, new { @class = "form-control hidden", required = "true", type = "text" })
                    @Html.TextBoxFor(m => m.LocationId, new { @class = "form-control hidden", required = "true", type = "text" })
                </div>
            </div>
    
        <div class="col-md-6">

            <div id="name-group" class="form-group col-md-12">
                <label for="name" class="custom-label">Transfer time</label>
                <span class="input-group-addon custom-datepicker">
                    <span class="glyphicon glyphicon-calendar"></span>
                    @Html.TextBoxFor(m => m.TransferTime, new { @class = "datepicker", required = "true", type = "text" })
                </span>
            </div>

            <div id="name-group" class="form-group col-md-12">
                <input type="submit" class="btn btn-primary btn-raised" value="Transfer" />
            </div>

        </div>
    </div>
</form>



@section script
    {
    <script>
        var fromContainer =null;
        var toContainer = null;

        function updateWastage() {
            var wastage = parseFloat($("input[name=SourceWeight]").val()) - parseFloat($("input[name=DestinationWeight]").val());
            $("input[name=Wastage]").val(wastage.toFixed(2));
        }

        $("#liquidTransfer-form").on('submit', function (event) {
            var data = getFormValues("liquidTransfer-form");
            sendObjectToServer("../../api/LiquidTransfer/", data,
               function (data) {
                   showModalMessage("Liquid Transfered", "Liquid Transfered");
                   showModalMessage("Liquid Transfered", data);
               }, function (data) {
                   showModalMessage("Error", data);
               });
            event.preventDefault();
        });

        $('.datepicker').pickadate({
            // Escape any “rule” characters with an exclamation mark (!).
            format: 'yyyy-mm-dd',
            selectMonths: true, // Creates a dropdown to control month
            selectYears: 15 // Creates a dropdown of 15 years to control year
        });
        
        $("select[name=FromContainer]").change(function () {
            $.ajax({
                type: 'get',
                url: "../../api/Container/Get?containerId=" + $(this).val(),
                dataType: 'json',
                async: false,
                contentType: 'application/json',
                success: function (response) {
                    fromContainer = response;
                    var capacity = parseFloat((typeof response["capacity"] != 'undefined' && response["capacity"] != "") ? response["capacity"] : "0");
                    var density = parseFloat((typeof response["density"] != 'undefined' && response["density"] != "") ? response["density"] : "0") / 1000;
                    var volume = parseFloat((typeof response["volumeLitres"] != 'undefined' && response["volumeLitres"] != "") ? response["volumeLitres"] : "0");
                    var SourceWeight = density * volume;

                    var SourceWeightToAdd = parseFloat($("input[name=SourceWeight]").val() != "" ? $("input[name=SourceWeight]").val() : "0");
                    // set container current SourceWeight
                    $("#from-container-capacity").html("Capacity (kg) : " + capacity + " l");
                    // set container current strength
                    $("#from-container-SourceWeight").html("SourceWeight (kg) : " + (SourceWeight + SourceWeightToAdd) + " kg");
                    // set container current strength
                    $("#from-container-volume").html("Volume (l) : " + volume + " l");

                    $("#liquid-percentage-from").attr("style", "width : " + ((SourceWeight + SourceWeightToAdd) / capacity) * 100 + "%;");

                    $("input[name='LiquidType']").val(response["liquidTypeId"]);

                    $("input[name='SourceDepthFrom']").val(response["currentDepth"]);
                    $("input[name='SourceDepthTo']").val(response["currentDepth"]);

                    $("input[name='SourceDepthTo']").attr("min", 0);

                    $("input[name='SourceDepthTo']").attr("max", response["currentDepth"]);

                    updateContainerImages(parseFloat($("input[name=SourceDepthTo]").val()), parseFloat($("input[name=DestinationDepthTo]").val()));
                },
                error: function (response) {
                    console.log("failure" + response);
                }
            });
        });

        $("select[name=ToContainer]").change(function () {
            $.ajax({
                type: 'get',
                url: "../../api/Container/Get?containerId=" + $(this).val(),
                dataType: 'json',
                async: false,
                contentType: 'application/json',
                success: function (response) {

                    toContainer = response;
                    var capacity = parseFloat((typeof response["capacity"] != 'undefined' && response["capacity"] != "") ? response["capacity"] : "0");
                    var density = parseFloat((typeof response["density"] != 'undefined' && response["density"] != "") ? response["density"] : "0") / 1000;
                    var volume = parseFloat((typeof response["volumeLitres"] != 'undefined' && response["volumeLitres"] != "") ? response["volumeLitres"] : "0");
                    var SourceWeight = density * volume;
                    var SourceWeightToAdd = parseFloat($("input[name=SourceWeight]").val() != "" ? $("input[name=SourceWeight]").val() : "0");
                    // set container current SourceWeight
                    $("#to-container-capacity").html("Capacity (kg) : " + capacity + " l");
                    // set container current strength
                    $("#to-container-SourceWeight").html("SourceWeight (kg) : " + (SourceWeight + SourceWeightToAdd) + " kg");
                    // set container current strength
                    $("#to-container-volume").html("Volume (l) : " + volume + " l");

                    $("#liquid-percentage-to").attr("style", "width : " + ((SourceWeight + SourceWeightToAdd) / capacity) * 100 + "%;");

                    $("input[name='DestinationDepthFrom']").val(response["currentDepth"]);
                    $("input[name='DestinationDepthTo']").val(response["currentDepth"]);

                    $("input[name='DestinationDepthTo']").attr("min", response["currentDepth"]);

                    $("input[name='DestinationDepthTo']").attr("max", response["maxDepth"]);

                    updateContainerImages(parseFloat($("input[name=SourceDepthTo]").val()), parseFloat($("input[name=DestinationDepthTo]").val()));
                },
                error: function (response) {
                    console.log("failure" + response);
                }
            });
        });

        $('input[name=SourceDensity]').change(function () {
            if ($('input[name=SourceTemperature]').val() != '') {
                var strength = getStrength($(this).val(), $('input[name=SourceTemperature]').val());
                $("input[name=SourceStrength]").val(strength.toFixed(2));

                var volume = $("input[name=SourceBulkVolume]").val() != "" ? parseFloat($("input[name=SourceBulkVolume]").val()) : 0;
                $("input[name=SourceWeight]").val(((volume * parseFloat($(this).val())) / 1000).toFixed());
            } else {
                $("input[name=SourceStrength]").val('');

            }
            updateWastage();
        });

        $('input[name=SourceTemperature]').change(function () {
            if ($('input[name=SourceDensity]').val() != '') {
                var volume = $("input[name=SourceBulkVolume]").val() != "" ? parseFloat($("input[name=SourceBulkVolume]").val()) : 0;
                var density = $('input[name=SourceDensity]').val()!='' ? parseFloat($('input[name=SourceDensity]').val()) : 0;

                var strength = getStrength($('input[name=SourceDensity]').val(), $(this).val());
                strength = !isNaN( strength) ? parseFloat(strength) : 0;
                $("input[name=SourceStrength]").val(strength.toFixed(2));
                $("input[name=SourceWeight]").val(((volume * density)/1000).toFixed(2));
            } else {
                $("input[name=SourceStrength]").val('');
                $("input[name=SourceWeight]").val('');
            }
            updateWastage();
        });

        $('input[name=DestinationDensity]').change(function () {
            if ($('input[name=DestinationTemperature]').val() != '') {
                var strength = getStrength($(this).val(), $('input[name=DestinationTemperature]').val());
                $("input[name=DestinationStrength]").val(strength.toFixed(2));

                var volume = $("input[name=DestinationBulkVolume]").val() != "" ? parseFloat($("input[name=DestinationBulkVolume]").val()) : 0;
                $("input[name=DestinationWeight]").val(((volume * parseFloat($(this).val())) / 1000).toFixed());
            } else {
                $("input[name=DestinationStrength]").val('');
            }

            updateWastage();
        });

        $('input[name=DestinationTemperature]').change(function () {
            if ($('input[name=DestinationDensity]').val() != '') {
                var volume = $("input[name=DestinationBulkVolume]").val() != "" ? parseFloat($("input[name=DestinationBulkVolume]").val()) : 0;
                var density = $('input[name=DestinationDensity]').val() != '' ? parseFloat($('input[name=DestinationDensity]').val()) : 0;

                var strength = getStrength($('input[name=DestinationDensity]').val(), $(this).val());
                strength = !isNaN(strength) ? parseFloat(strength) : 0;
                $("input[name=DestinationStrength]").val(strength.toFixed(2));
                $("input[name=DestinationWeight]").val(((volume * density) / 1000).toFixed(2));
            } else {
                $("input[name=DestinationStrength]").val('');
                $("input[name=DestinationWeight]").val('');
            }

            updateWastage();
        });

        $("input[name='SourceDepthTo']").change(function () {
            var strength = parseFloat($("#input[name='SourceStrength']").val() != "" || $("input[name='SourceStrength']").val() != "Error" ? parseFloat($("input[name='SourceStrength']").val()) : 0);
            var density = parseFloat($("input[name='SourceDensity']").val());
            var containerId = $("select[name='FromContainer']").val() != "" ? parseFloat($("select[name='FromContainer']").val()) : 0;
            var containerFromDepth = $("input[name='SourceDepthFrom']").val() != "" ? parseFloat($("input[name='SourceDepthFrom']").val()) : 0;
            var containerToDepth = $(this).val() != "" ? parseFloat($(this).val()) : 0;
            var volume = parseFloat(getVolume(containerId, containerFromDepth, containerToDepth));



            $("input[name='SourceBulkVolume']").val(volume.toFixed(2));
            
            updateWastage();
            updateContainerImages(parseFloat($("input[name='SourceDepthTo']").val()), parseFloat($("input[name='DestinationDepthTo']").val()));
        });

        $("input[name='DestinationDepthTo']").change(function () {
            var strength = parseFloat($("#input[name='DestinationStrength']").val() != "" || $("input[name='DestinationStrength']").val() != "Error" ? parseFloat($("input[name='DestinationStrength']").val()) : 0);
            var density = parseFloat($("input[name='DestinationDensity']").val());
            var containerId = $("select[name='FromContainer']").val() != "" ? parseFloat($("select[name='FromContainer']").val()) : 0;
            var containerFromDepth = $("input[name='DestinationDepthFrom']").val() != "" ? parseFloat($("input[name='DestinationDepthFrom']").val()) : 0;
            var containerToDepth = $(this).val() != "" ? parseFloat($(this).val()) : 0;
            var volume = parseFloat(getVolume(containerId, containerFromDepth, containerToDepth));

            $("input[name='DestinationBulkVolume']").val(volume.toFixed(2));

            updateWastage();
            updateContainerImages(parseFloat($("input[name='SourceDepthTo']").val()), parseFloat($("input[name='DestinationDepthTo']").val()));
            
        });

        function updateContainerImages(fromContainerToDepth, toContainerToDepth) {

            if (fromContainer != null) {

            var containerView = $("#" + "liquid-percentage-from");
            var progressBar = containerView.find(".progress");
            var greenbar = progressBar.find(".progress-bar-one");
            var blackbar = progressBar.find(".progress-bar-two");
            var barOneWidth = "width:" + ((fromContainerToDepth / parseFloat(fromContainer["maxDepth"])) * 100).toFixed(2) + "%";
            var barTwoWidth = "width:" + ((((fromContainer["currentDepth"] - fromContainerToDepth)) / parseFloat(fromContainer["maxDepth"])) * 100).toFixed(2) + "%;" + "background-color:black";
            console.log(barTwoWidth);
            greenbar.attr("style", barOneWidth);
            blackbar.attr("style", barTwoWidth);
            }

            if (toContainer != null) {

            var containerView = $("#" + "liquid-percentage-to");
            var progressBar = containerView.find(".progress");
            var greenbar = progressBar.find(".progress-bar-one");
            var blackbar = progressBar.find(".progress-bar-two");
            var barOneWidth = "width:" + ((parseFloat(toContainer["currentDepth"]) / parseFloat(toContainer["maxDepth"])) * 100).toFixed(2) + "%";
            var barTwoWidth = "width:" + ((((toContainerToDepth - toContainer["currentDepth"])) / parseFloat(toContainer["maxDepth"])) * 100).toFixed(2) + "%;" + "background-color:yellow";
            console.log(barTwoWidth);
            greenbar.attr("style", barOneWidth);
            blackbar.attr("style", barTwoWidth);
            }

            updateWastage();
        }

        $('select').each(function () {
            $(this).material_select();
            $(this).siblings("span").html("");
        });
        $('select').addClass("hidden");

        $(".navigation-help").html("Vats / Transfer Liquid");
    </script>
}