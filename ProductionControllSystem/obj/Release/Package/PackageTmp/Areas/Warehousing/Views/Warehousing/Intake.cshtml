@using ProductionControllSystem.Areas.Processing.Models;
@using ClassLibrary.DatabaseModels;

@model  TransferLiquidViewModel
@{
    ViewBag.Title = "Intake";
}

<title>@ViewBag.title</title>
<h5>@ViewBag.title</h5>

<ul class="nav nav-tabs" style="margin-bottom: 15px;">
    <li class="active"><a href="#transfer" data-toggle="tab">Intake</a></li>
    <li><a href="#container" data-toggle="tab">Vat Statuses</a></li>
</ul>
<div id="myTabContent" class="tab-content">
    <div class="tab-pane fade active in" id="transfer">
        <form action="no-implementation" id="liquidTransfer-form"  class="No3Intake" method="POST">
            <div class="panel sub-content-panel col-md-5 pull-left"  >
                <div id="name-group" class="form-group col-md-12">
                    <div class="col-md-12">
                        <label for="name" class="custom-label">From Container : </label>
                    </div>
                    <div class="col-md-12 input-field">
                        @if (Model.ToContainer.Count > 0)
                        {
                            @Html.DropDownListFor(m => m.ToContainer,
                                  new SelectList(Model.ToContainer,
                               "Id", "ContainerName",
                                        Model.ToContainer.First().Id), new { @class = "form-control ", id = "Id", name = "ToContainer" })
                        }
                        else
                        {
                            <label class="custom-label">No Vats.</label>
                        }
                    </div>
                </div>

                <div class="col-md-12" id="liquid-percentage-from">
                    <div class="col-md-6 vat_div">
                        <div class="progress vertical-sibling">
                            <div class="progress-bar progress-bar-one progress-bar-striped " role="progressbar" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"></div>
                            <div class="progress-bar progress-bar-two progress-bar-striped " role="progressbar" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100" style="width: 0%;background-color:black"></div>
                        </div>
                    </div>
                    <div class="col-md-6">
                    </div>
                </div>
                <div class="panel sub-content-panel col-md-12">
                    <h6>Current Status :- </h6>

                    <div id="name-group" class="form-group col-md-6">
                        <label for="name" class="custom-label">Current Dip (cm)</label>
                        @Html.TextBoxFor(m => m.SourceDepthFrom, new { @class = "form-control disabled", tabindex = "-1", required = "true", type = "number", step = "0.01" })
                    </div>

                    <div id="name-group" class="form-group col-md-6">
                        <label for="name" class="custom-label">Temperature (C)</label>
                        @Html.TextBoxFor(m => m.SourceTemperature, new { @class = "form-control disabled", required = "true", type = "number", step = "0.01", min = 0, tabIndex = "-1" })
                    </div>

                    <div id="name-group" class="form-group col-md-6">
                        <label for="name" class="custom-label">Density (Kg/m<sup>3</sup>)</label>
                        @Html.TextBoxFor(m => m.SourceDensity, new { @class = "form-control disabled", required = "true", type = "number", step = "0.01", min = 0, tabIndex = "-1" })
                    </div>

                    <div id="name-group" class="form-group col-md-6">
                        <label for="name" class="custom-label">Strength</label>
                        @Html.TextBoxFor(m => m.SourceStrength, new { @class = "form-control disabled", tabindex = "-1", required = "true", type = "number", step = "0.01" })
                    </div>
                    <div id="name-group" class="form-group col-md-6">
                        <label for="name" class="custom-label">A/A (l)</label>
                        @Html.TextBoxFor(m => m.CurrentPure, new { @class = "form-control disabled", tabindex = "-1", required = "true", type = "number", step = "0.01" })
                    </div>
                    <div id="name-group" class="form-group col-md-6">
                        <label for="name" class="custom-label">Bulk (l)</label>
                        @Html.TextBoxFor(m => m.CurrentBulk, new { @class = "form-control disabled", tabindex = "-1", required = "true", type = "number", step = "0.01" })
                    </div>

                </div>
            </div>

            <div class="panel sub-content-panel col-md-6 pull-right">
                <div id="name-group" class="form-group col-md-6">
                    <div class="col-md-12">
                        <label for="name" class="custom-label">Source Location : </label>
                    </div>
                    <div class="col-md-12">
                        @if (Model.FromContainer.Count > 0)
                            {

                            @Html.DropDownListFor(m => m.FromContainer,
                                  new SelectList(Model.FromContainer,
                               "Id", "ContainerName",
                                        Model.ToContainer.First().Id), new { @class = "form-control", id = "Id", name = "FromContainer" })
                            }
                            else
                            {
                            <label class="custom-label">No Vat.</label>
                            }
                    </div>
                </div>
                <div id="name-group" class="form-group col-md-6">
                    <div class="col-md-12">
                        <label for="name" class="custom-label">Liquid Type</label>
                    </div>
                    <div class="col-md-12">
                        @Html.DropDownListFor(m => m.LiquidTypeId,
                                          new SelectList(Model.LiquidTypeId,
                                       "LiquidTypeId", "LiquidName",
                                                Model.LiquidTypeId.First().LiquidTypeId), new { @class = "form-control",  id = "LiquidTypeId", name = "LiquidName" })

                    </div>
                </div>
            </div>

            <div class="panel sub-content-panel col-md-6 pull-right">
                <div class="col-md-12">
                    <div id="name-group" class="form-group col-md-5">
                        <label for="name" class="custom-label">Final Dip (cm)</label>
                        @Html.TextBoxFor(m => m.DestinationDepthTo, new { @class = "form-control custom-text-box", required = "true", type = "number", step = "0.01" })
                    </div>
                    <div id="name-group" class="form-group col-md-5">
                        <label for="name" class="custom-label">Bulk (l):</label>
                        @Html.TextBoxFor(m => m.DestinationBulkVolume, new { @class = "form-control disabled", tabindex = "-1", required = "true", type = "number", step = "0.01" })
                    </div>
                </div>

                <div class="col-md-12">
                        @Html.TextBoxFor(m => m.CreatedUser, new { @class = "form-control hidden" , type = "text" })
                        @Html.TextBoxFor(m => m.LocationId, new { @class = "form-control hidden", type = "text" })
                </div>
                <div class="col-md-12">
                    <div id="name-group" class="form-group col-md-5">
                        <label for="name" class="custom-label">Temperature (C)</label>
                        @Html.TextBoxFor(m => m.DestinationTemperature, new { @class = "form-control custom-text-box", required = "true", type = "number", step = "0.01", min = 0 })
                    </div>

                    <div id="name-group" class="form-group col-md-5">
                        <label for="name" class="custom-label">Density (Kg/m<sup>3</sup>)</label>
                        @Html.TextBoxFor(m => m.DestinationDensity, new { @class = "form-control custom-text-box", required = "true", type = "number", step = "0.01", min = 0})
                    </div>
                    </div>
                <div class="col-md-12">
                    <div id="name-group" class="form-group col-md-4">
                        <label for="name" class="custom-label">Strength</label>
                        @Html.TextBoxFor(m => m.DestinationStrength, new { @class = "form-control", tabindex = "-1", required = "true", type = "number", step = "0.01" })
                    </div>
                    <div id="name-group" class="form-group col-md-4">
                        <label for="name" class="custom-label">A/A (l):</label>
                        @Html.TextBoxFor(m => m.DestinationPureVolume, new { @class = "form-control disabled", tabindex = "-1", required = "true", type = "number", step = "0.01" })
                    </div>
                    <div id="name-group" class="form-group col-md-4">
                        <div class="col-md-12">
                            <label for="name" class="custom-label">Wastage</label>
                        </div>
                        <div class="col-md-12">
                            @Html.TextBoxFor(m => m.Wastage, new { @class = "form-control", required = "true", type = "text" })
                        </div>
                    </div>
                </div>
                <div class="col-md-12">

                    <div id="name-group" class="form-group col-md-6">
                        <label for="name" class="custom-label">Transfer time</label>
                        <span class="input-group-addon custom-datepicker form-control">
                            <span class="glyphicon glyphicon-calendar date-icon"></span>
                            @Html.TextBoxFor(m => m.TransferTime, new { @class = "datepicker form-control custom-text-box", required = "true", type = "text", disabled = "disabled" })
                        </span>
                    </div>

                    <div id="name-group" class="form-group col-md-6">
                        <input type="submit" class="btn btn-primary btn-raised" value="Intake" />
                    </div>

                </div>
            </div>
        </form>
    </div>

    <div class="tab-pane fade" id="container">
        <div class="col-md-12 panel sub-content-panel pull-right">
            <h5>Vats</h5>
            <table id="containers-table" class="display table table-hover table-striped" cellspacing="0" width="100%">
                <thead>
                    <tr>
                        <th>Container</th>
                        <th>Liquid Type</th>
                        <th>Bulk (l)</th>
                        <th>A/A (l)</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Container reciever in Model.ToContainer)
                    {
                        if (reciever.Id != "0")
                        {
                            <tr>
                                <td>
                                    @reciever.ContainerName
                                </td>
                                <td>
                                    @if(Model.LiquidTypeId.Find(l => l.LiquidTypeId == reciever.LiquidTypeId)!=null)
                                    {
                                        <span>@Model.LiquidTypeId.Find(l => l.LiquidTypeId == reciever.LiquidTypeId).LiquidName</span>
                                    }
                                    else
                                    {
                                        <span>Unknown</span>
                                    }
                                </td>
                                <td>
                                    @reciever.FilledVolume
                                </td>
                                <td>
                                    @reciever.PureVolume
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section script
    {
    <script>
        var ToContainer = null;
        var FromContainer = null;

        function updateWastage() {
            var wastage = 0;//parseFloat($("input[name=DestinationBulkVolume]").val()) - parseFloat($("input[name=SourceBulkVolume]").val());
            $("input[name=Wastage]").val(wastage.toFixed(1));
        }

        var receiversTable = initiateTable1("containers-table",
                    {
                        "footer": true,
                        "bLengthChange": false
                    }
                , function () { }, function () { });

        $("#liquidTransfer-form").on('submit', function (event) {
            var error = "";
            error = $("input[name=TransferTime]").val() == "" ? error + "</br>Please enter transfer date." : error;
            error = $("select[name=ToContainer]").val() == "0" ? error + "</br>Please select container." : error;
            error = $("select[name=FromContainer]").val() == "0" ? error + "</br>Please select location." : error;

            if (error != "") {
                showModalMessage("Error", error);
            } else {
                var data = getFormValues("liquidTransfer-form");
                sendObjectToServer("../../api/Warehouse/IntakeByDip", data,
                   function (data) {
                       showModalMessage("Intake", "Intake successful.");
                   }, function (data) {
                       showModalMessage("Error", data);
                   });
            }
            event.preventDefault();
        });

        var d = new Date();
        d.setFullYear(d.getFullYear() - 100);
        $('.datepicker').pickadate({
            // Escape any “rule” characters with an exclamation mark (!).
            format: 'yyyy-mm-dd',
            selectYears: d,
            max: new Date(),
            selectMonths: true, // Creates a dropdown to control month
            selectYears: 15 // Creates a dropdown of 15 years to control year
        });

        var $input = $('.datepicker').pickadate()
        var picker = $input.pickadate('picker');
        picker.set('disable', true)

        $("select[name=ToContainer]").change(function () {
            if ($(this).val() == "0") {

                $("#liquid-percentage-from").removeAttr("style");

                MaterialSelectReinitiate("select[name='LiquidTypeId']", 0)

                $("input[name=DestinationDepthTo]").attr("min", pareFloat(ToContainer["currentDepth"]) + 1);
                $("input[name=DestinationDepthTo]").val(ToContainer["currentDepth"]);
                $("input[name='SourceDepthFrom']").val(ToContainer["currentDepth"]);
                $("input[name='SourceDensity']").val("");
                $("input[name='SourceTemperature']").val("");
                $("input[name='SourceStrength']").val("");
                $("input[name='SourceBulkVolume']").val("");
                $("input[name='SourcePureVolume']").val("");
                $("input[name='CurrentPure']").val("");
                $("input[name='CurrentBulk']").val("");
                $("input[name='Wastage']").val("");

                updateContainerImages(parseFloat($("input[name=DestinationDepthTo]").val()), 0);

                return;
            }
            $.ajax({
                type: 'get',
                url: "../../api/Container/Get?containerId=" + $(this).val(),
                dataType: 'json',
                async: true,
                contentType: 'application/json',
                success: function (response) {
                    ToContainer = response;

                    var capacity = parseFloat((typeof response["capacity"] != 'undefined' && response["capacity"] != "") ? response["capacity"] : "0");
                    var density = parseFloat((typeof response["density"] != 'undefined' && response["density"] != "") ? response["density"] : "0");
                    var temperature = parseFloat((typeof response["temperature"] != 'undefined' && response["temperature"] != "") ? response["temperature"] : "0");
                    var strength = parseFloat((typeof response["strength"] != 'undefined' && response["strength"] != "") ? response["strength"] : "0");

                    var volume = parseFloat((typeof response["fillVolume"] != 'undefined' && response["fillVolume"] != "") ? response["fillVolume"] : "0");
                    var pureVolume = parseFloat((typeof response["pureVolume"] != 'undefined' && response["pureVolume"] != "") ? response["pureVolume"] : "0");

                    MaterialSelectReinitiate("select[name='LiquidTypeId']", response["liquidTypeId"]);
                    $("input[name='SourceDepthFrom']").val(response["currentDepth"]);
                    $("input[name='DestinationDepthTo']").val("");
                    $("input[name='SourceBulkVolume']").val("");
                    $("input[name='SourcePureVolume']").val("");
                    $("input[name='SourceDensity']").val(density);
                    $("input[name='SourceTemperature']").val(temperature);
                    $("input[name='SourceStrength']").val(strength);

                    $("input[name='DestinationDepthTo']").attr("max", response["maxDepth"]);

                    $("input[name='DestinationDepthTo']").attr("min", response["currentDepth"]);
                    $("input[name='CurrentPure']").val(ToContainer["pureVolume"]);
                    $("input[name='CurrentBulk']").val(ToContainer["fillVolume"]);
                    updateContainerImages(parseFloat($("input[name=DestinationDepthTo]").val()), parseFloat($("input[name=SourceDepthFrom]").val()));
                },
                error: function (response) {
                    console.log("failure" + response);
                }
            });
        });

        $("select[name=FromContainer]").change(function () {
            if ($(this).val() == "0") {
                if ($(this).val() == "0") {
                    $("#liquid-percentage-from").removeAttr("style");

                    MaterialSelectReinitiate("select[name='LiquidTypeId']", 0)
                    FromContainer["currentDepth"] = 0;
                    $("input[name='DestinationDepthFrom']").val("");
                    $("input[name='DestinationDepthTo']").val("");
                    $("input[name='DestinationDensity']").val("");
                    $("input[name='DestinationTemperature']").val("");
                    $("input[name='DestinationStrength']").val("");
                    $("input[name='DestinationBulkVolume']").val("");
                    return;
                }
                return;
            }
            $.ajax({
                type: 'get',
                url: "../../api/Container/Get?containerId=" + $(this).val(),
                dataType: 'json',
                async: false,
                contentType: 'application/json',
                success: function (response) {
                    FromContainer = response;
                    console.log(response);
                    if (parseFloat(response["currentDepth"]) > 0 && response["liquidTypeId"] != $("select[name='LiquidTypeId']").val()) {
                        MaterialSelectReinitiate("select[name='FromContainer']", 0);


                        $("#liquid-percentage-from").removeAttr("style");

                        MaterialSelectReinitiate("select[name='LiquidTypeId']", 0)
                        FromContainer["currentDepth"] = 0;
                        $("input[name='DestinationDepthFrom']").val("0");
                        $("input[name='DestinationDepthTo']").val("0");
                        $("input[name='DestinationDensity']").val("0");
                        $("input[name='DestinationTemperature']").val("0");
                        $("input[name='DestinationStrength']").val("0");
                        $("input[name='DestinationBulkVolume']").val("0");
                        updateContainerImages(parseFloat($("input[name=DestinationDepthTo]").val()), parseFloat($("input[name=DestinationDepthTo]").val()));
                        return;
                    }

                    var capacity = parseFloat((typeof response["capacity"] != 'undefined' && response["capacity"] != "") ? response["capacity"] : "0");
                    var density = parseFloat((typeof response["density"] != 'undefined' && response["density"] != "") ? response["density"] : "0") / 1000;
                    var volume = parseFloat((typeof response["volumeLitres"] != 'undefined' && response["volumeLitres"] != "") ? response["volumeLitres"] : "0");
                   
                    $("input[name='DestinationDepthFrom']").val(response["currentDepth"]);
                    $("input[name='DestinationDepthTo']").val(response["currentDepth"]);

                    $("input[name='DestinationDepthTo']").attr("min", response["currentDepth"]);

                    $("input[name='DestinationDepthTo']").attr("max", response["maxDepth"]);

                },
                error: function (response) {
                    console.log("failure" + response);
                }
            });
        });

        $('input[name=DestinationDensity]').change(function () {
            if ($('input[name=DestinationTemperature]').val() != '') {
                var strength = getStrength($(this).val(), $('input[name=DestinationTemperature]').val());
                var volume = $("input[name=DestinationBulkVolume]").val() != "" ? parseFloat($("input[name=DestinationBulkVolume]").val()) : 0;
                var density = parseFloat($(this).val());
                strength = !isNaN(parseFloat(strength)) ? parseFloat(strength) : 0;
                volume = !isNaN(parseFloat(volume)) ? parseFloat(volume) : 0;
                density = !isNaN(parseFloat(density)) ? parseFloat(density) : 0;

                $("input[name=DestinationStrength]").val(strength.toFixed(1));
                $("input[name=DestinationPureVolume]").val(parseFloat((volume * strength) / 100).toFixed(1));
            } else {
                $("input[name=DestinationStrength]").val('');
            }
            updateWastage();
        });

        $('input[name=DestinationTemperature]').change(function () {
            if ($('input[name=DestinationDensity]').val() != '') {
                var volume = $("input[name=DestinationBulkVolume]").val() != "" ? parseFloat($("input[name=DestinationBulkVolume]").val()) : 0;
                var density = $('input[name=DestinationDensity]').val() != '' ? parseFloat($('input[name=DestinationDensity]').val()) : 0;

                var strength = getStrength($('input[name=DestinationDensity]').val(), $(this).val());
                strength = !isNaN(parseFloat(strength)) ? parseFloat(strength) : 0;

                $("input[name=DestinationPureVolume]").val(parseFloat((volume * strength) / 100).toFixed(1));
                $("input[name=DestinationStrength]").val(strength.toFixed(1));
            } else {
                $("input[name=DestinationStrength]").val('');
            }
            updateWastage();
        });

        $("input[name='DestinationDepthTo']").change(function () {
            var strength = parseFloat($("#input[name='SourceStrength']").val() != "" || $("input[name='SourceStrength']").val() != "Error" ? parseFloat($("input[name='SourceStrength']").val()) : 0);
            var density = parseFloat($("input[name='SourceDensity']").val());
            var containerId = $("select[name='ToContainer']").val() != "" ? parseFloat($("select[name='ToContainer']").val()) : 0;
            var containerFromDepth = $("input[name='SourceDepthFrom']").val() != "" ? parseFloat($("input[name='SourceDepthFrom']").val()) : 0;
            var containerToDepth = $(this).val() != "" ? parseFloat($(this).val()) : 0;
            var volume = parseFloat(getVolume(containerId, containerFromDepth, containerToDepth));
            var reading1 = parseFloat(getVolume(containerId, 0, containerFromDepth));
            var reading2 = parseFloat(getVolume(containerId, 0, containerToDepth));

            reading1 = !isNaN(reading1) ? parseFloat(reading1) : 0;
            strength = !isNaN(strength) ? parseFloat(strength) : 0;
            reading2 = !isNaN(reading2) ? parseFloat(reading2) : 0;
            var pureVolume = parseFloat(((volume.toFixed(1) * strength.toFixed(1)) / 100).toFixed(1));
            $("input[name=DestinationPureVolume]").val(pureVolume);
            $("input[name='DestinationBulkVolume']").val(volume.toFixed(1));

            var pureReading1 = ((strength.toFixed(1) * reading1) / 100).toFixed(1);
            var pureReading2 = ((strength.toFixed(1) * reading2) / 100).toFixed(1);
            var wastage = parseFloat(pureVolume.toFixed(1) - (pureReading2 - pureReading1).toFixed(1));
            console.log("wastage :" + wastage.toFixed(1));
            console.log("reading1 :" + reading1);
            console.log("reading2 :" + reading2);
            console.log("pure reading1 :" + pureReading1);
            console.log("pure reading2 :" + pureReading2);
            console.log("issue bulk:" + volume.toFixed(1));
            console.log("issue pure:" + (pureReading2 - pureReading1).toFixed(1));
            console.log("pure :" + pureVolume);

            $("input[name='Wastage']").val(wastage.toFixed(1));

            updateContainerImages(parseFloat($("input[name='DestinationDepthTo']").val()), parseFloat($("input[name='DestinationDepthTo']").val()));
        });

        function updateContainerImages(ToContainerToDepth, FromContainerToDepth) {

            if (ToContainer != null) {

                var containerView = $("#" + "liquid-percentage-from");
                var progressBar = containerView.find(".progress");
                var greenbar = progressBar.find(".progress-bar-one");
                var blackbar = progressBar.find(".progress-bar-two");

                var barOneWidth = "width:" + ((ToContainerToDepth / parseFloat(ToContainer["maxDepth"])) * 100).toFixed(1) + "%";
                var barTwoWidth = "width:" + ((((ToContainer["currentDepth"] - ToContainerToDepth)) / parseFloat(ToContainer["maxDepth"])) * 100).toFixed(1) + "%;" + "background-color:black";
                greenbar.attr("style", barOneWidth);
                blackbar.attr("style", barTwoWidth);
            }
            //updateWastage();
        }

        $('select').each(function () {
            $(this).material_select();
            $(this).siblings("span").html("");
        });
        $('select').addClass("hidden");
        $(".navigation-help").html("Warehouse / Intake");
    </script>
}