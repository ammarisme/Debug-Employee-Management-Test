@using ProductionControllSystem.Areas.Warehousing.Models;
@using ClassLibrary.DatabaseModels;

@model  WarehousingBlendViewModel
@{
    ViewBag.Title = "Liquid Transfer(New)";
}

<title>@ViewBag.title</title>
<h5>@ViewBag.title</h5>

<ul class="nav nav-tabs" style="margin-bottom: 15px;">
    <li class="active"><a href="#transfer" data-toggle="tab">Transfer</a></li>
    <li><a href="#container" data-toggle="tab">Containers</a></li>
</ul>
<div id="myTabContent" class="tab-content">
    <div class="tab-pane fade active in" id="transfer">
         <form action="no-implementation" id="liquidTransfer-form" method="POST">
            <div class="col-md-6 pull-left" id="liquidTransfer-div">
                <div class="panel sub-content-panel col-md-12 pull-left">
                    <div class="col-md-12">
                        <div class="col-md-6 pull-left">
                            <div id="name-group" class="form-group pull-left">
                                <div class="col-md-12 input-field">
                                    @if (Model.Container.Count > 0)
                                    {
                                        @Html.DropDownListFor(m => m.Container,
                                  new SelectList(Model.Container,"Id", "ContainerName",
                                        Model.Container.First().Id), new { @class = "form-control ", id = "Id", name = "Container" })
                                    }
                                    else
                                    {
                                        <label class="custom-label">No Vat.</label>
                                    }
                                </div>
                            </div>
                            <div class="form-group pull-left">
                                <div class="col-md-12">
                                    @Html.DropDownListFor(m => m.LiquidTypeId,
                                  new SelectList(Model.LiquidTypeId,
                               "LiquidTypeId", "LiquidName",
                                        Model.LiquidTypeId.First().LiquidTypeId), new { @class = "form-control disabled", id = "LiquidTypeId", tabindex = "-1", name = "LiquidName" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="col-md-12" id="liquid-percentage-from">
                                <div class="col-md-12 vat_div">
                                    <div class="progress vertical-sibling">
                                        <div class="progress-bar progress-bar-one progress-bar-striped " role="progressbar" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"></div>
                                        <div class="progress-bar progress-bar-two progress-bar-striped " role="progressbar" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100" style="width: 0%;background-color:black"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div>
                        <div id="name-group" class="form-group col-md-4">
                            <label for="name" class="custom-label">Cur. Dip(cm)</label>
                            @Html.TextBoxFor(m => m.Transfers.FirstOrDefault().CurrentDip, new { @class = "form-control disabled", required = "true", tabindex = "-1", type = "number", step = "0.01" })
                        </div>
                        <div id="name-group" class="form-group col-md-5">
                            <label for="name" class="custom-label">Final Dip (cm)</label>
                            @Html.TextBoxFor(m => m.Transfers.FirstOrDefault().FinalDip, new { @class = "form-control custom-text-box", required = "true", type = "number", step = "0.01", min = 0 })
                        </div>
                        <div id="name-group" class="form-group col-md-5">
                            <label for="name" class="custom-label">Bulk (l):</label>
                            @Html.TextBoxFor(m => m.Transfers.FirstOrDefault().BulkVolume, new { @class = "form-control disabled", tabindex = "-1", required = "true", type = "number", step = "0.01" })
                        </div>
                    </div>


                    <div class="col-md-12">
                        <div id="name-group" class="form-group col-md-4">
                            <label for="name" class="custom-label">Strength</label>
                            @Html.TextBoxFor(m => m.Transfers.FirstOrDefault().Strength, new { @class = "form-control disabled", tabindex = "-1", type = "number", step = "0.01" })
                        </div>
                        <div id="name-group" class="form-group col-md-4">
                            <label for="name" class="custom-label">A/A (l):</label>
                            @Html.TextBoxFor(m => m.Transfers.FirstOrDefault().PureVolume, new { @class = "form-control disabled", tabindex = "-1", required = "true", type = "number", step = "0.01" })
                        </div>

                        <div id="name-group" class="form-group col-md-4" style="margin-top: 20px!important;">
                            <div id="addButton" class="btn btn-primary btn-raised">Add</div>
                        </div>
                    </div>
                    @Html.TextBoxFor(m => m.Transfers.FirstOrDefault().Temperature, new { @class = "form-control hidden" })
                    @Html.TextBoxFor(m => m.Transfers.FirstOrDefault().Density, new { @class = "form-control hidden" })
                </div>

                <div class="panel sub-content-panel col-md-12 pull-left">
                    <h5>Transfer Sources</h5>
                    <table id="transfers-table" class="display table table-hover table-striped" cellspacing="0" width="100%"></table>
                </div>
            </div>


            <div class="panel sub-content-panel col-md-6 pull-right" id="destination-transfer-div">
                <div class="col-md-12">
                    <div class="col-md-7">
                        <div id="name-group" class="form-group col-md-12">
                            <label for="name" class="custom-label">To Container : </label>
                            @if (Model.ToContainer.Count > 0)
                            {

                                @Html.DropDownListFor(m => m.ToContainer,
                                  new SelectList(Model.ToContainer,
                               "Id", "ContainerName",
                                        Model.Container.First().Id), new { @class = "form-control", id = "Id", name = "ToContainer" })
                            }
                            else
                            {
                                <label class="custom-label">No Vat.</label>
                            }
                        </div>
                        <div class="form-group col-md-12">
                            <label for="name" class="custom-label">Blend: </label>
                                @Html.DropDownListFor(k => k.LiquidTypeId,
                                new SelectList(Model.LiquidTypeId.FindAll(l => l.Category=="CS"), "LiquidTypeId", "LiquidName",Model.LiquidTypeId.First().LiquidTypeId), new { @class = "form-control", id = "LiquidTypeId", tabindex = "-1", name = "LiquidName" })
                        </div>
                    </div>
                    <div class="col-md-5" id="liquid-percentage-to">
                        <div class="col-md-12 vat_div">
                            <div class="progress vertical-sibling">
                                <div class="progress-bar progress-bar-one progress-bar-striped " role="progressbar" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"> </div>
                                <div class="progress-bar progress-bar-two progress-bar-striped " role="progressbar" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"> </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-12">
                    <div id="name-group" class="form-group col-md-6">
                        <label for="name" class="custom-label">Cur. Dip (cm)</label>
                        @Html.TextBoxFor(m => m.DestinationDepthFrom, new { @class = "form-control disabled", tabindex = "-1", required = "true", type = "number", step = "0.01" })
                    </div>
                    <div id="name-group" class="form-group col-md-6">
                        <label for="name" class="custom-label">Final Dip (cm)</label>
                        @Html.TextBoxFor(m => m.DestinationDepthTo, new { @class = "form-control custom-text-box", required = "true", type = "number", step = "0.01", min = 1 })
                    </div>
                </div>
                <div class="col-md-12">
                    <div id="name-group" class="form-group col-md-6">
                        <label for="name" class="custom-label">Temperature (C)</label>
                        @Html.TextBoxFor(m => m.DestinationTemperature, new { @class = "form-control custom-text-box", required = "true", type = "number", step = "0.01", min = 1 })
                    </div>
                    <div id="name-group" class="form-group col-md-6">
                        <label for="name" class="custom-label">Density (Kg/m<sup>3</sup>)</label>
                        @Html.TextBoxFor(m => m.DestinationDensity, new { @class = "form-control custom-text-box", required = "true", type = "number", step = "0.01", min = 1 })
                    </div>
                </div>
                @Html.TextBoxFor(m => m.DestinationWeight, new { @class = "form-control hidden", required = "true", type = "number", step = "0.01" })

                <div class="col-md-12">

                    <div id="name-group" class="form-group col-md-4">
                        <label for="name" class="custom-label">Strength</label>
                        @Html.TextBoxFor(m => m.DestinationStrength, new { @class = "form-control disabled", required = "true", tabindex = "-1", type = "number", step = "0.01" })
                    </div>
                    <div id="name-group" class="form-group col-md-4">
                        <label for="name" class="custom-label">Bulk (l):</label>
                        @Html.TextBoxFor(m => m.DestinationBulkVolume, new { @class = "form-control disabled", required = "true", type = "number", tabindex = "-1", step = "0.01" })
                    </div>
                    <div id="name-group" class="form-group col-md-4">
                        <label for="name" class="custom-label">A/A (l):</label>
                        @Html.TextBoxFor(m => m.DestinationPureVolume, new { @class = "form-control disabled", required = "true", type = "number", tabindex = "-1", step = "0.01" })
                    </div>
                </div>
                <div class="col-md-12">
                    <div id="name-group" class="form-group col-md-4">
                        <label for="name" class="custom-label">New Bulk (l):</label>
                        @Html.TextBoxFor(m => m.NewDestinationBulk, new { @class = "form-control disabled", required = "true", type = "number", tabindex = "-1", step = "0.01" })
                    </div>

                    <div id="name-group" class="form-group col-md-4">
                        <label for="name" class="custom-label">New A/A (l):</label>
                        @Html.TextBoxFor(m => m.NewDestinationPure, new { @class = "form-control disabled", required = "true", type = "number", tabindex = "-1", step = "0.01" })
                    </div>

                </div>
                <div class="col-md-12" id="div2WarehousingTo">
                    @*<div id="name-group" class="form-group col-md-4">
                        <label for="name" class="custom-label">Bulk Wastage</label>
                        @Html.TextBoxFor(m => m.Wastage, new { @class = "form-control disabled", required = "true", type = "text", tabindex = "-1", })
                    </div>*@
                    <div id="name-group" class="form-group col-md-4">
                        <label for="name" class="custom-label">Pure Wastage</label>
                        @Html.TextBoxFor(m => m.PureWastage, new { @class = "form-control disabled", required = "true", type = "text", tabindex = "-1", })
                    </div>
                    <div id="name-group" class="form-group col-md-4">
                        <label for="name" class="custom-label">Date</label>
                        <span class="input-group-addon custom-datepicker form-control">
                            <span class="glyphicon glyphicon-calendar date-icon"></span>
                            @Html.TextBoxFor(m => m.TransferTime, new { @class = "datepicker form-control custom-text-box", required = "true", type = "text", disabled="disbaled"})
                        </span>
                    </div>

                </div>
                <div class="hidden">
                    @Html.TextBoxFor(m => m.CreatedUser, new { @class = "form-control hidden", type = "text" })
                    @Html.TextBoxFor(m => m.TransferType, new { @class = "form-control hidden", type = "text" })
                    @Html.TextBoxFor(m => m.LocationId, new { @class = "form-control hidden", type = "text" })
                </div>
            </div>


            <div class="panel sub-content-panel col-md-12 ">
                <div id="name-group" class="form-group col-md-4 pull-right">
                    <input type="submit" class="btn btn-primary btn-raised pull-right" value="Transfer" />
                </div>

            </div>
        </form>
    </div>

    <div class="tab-pane fade " id="container">
        <div class="col-md-12 panel sub-content-panel pull-right">
            <h5>Vats/Receivers</h5>
            <table id="containers-table" class="display table table-hover table-striped" cellspacing="0" width="100%">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Liquid Type Id</th>
                        <th>Container Name</th>
                        <th>Liquid Type</th>
                        <th>Cur. Dip</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Container reciever in Model.ToContainer)
                    {
                        if (reciever.Id != "0")
                        {
                            <tr>
                                <td>
                                    @reciever.Id
                                </td>
                                <td>
                                    @reciever.LiquidTypeId
                                </td>
                                <td>
                                    @reciever.ContainerName
                                </td>
                                <td>
                                    @if (Model.LiquidTypeId.Find(l => l.LiquidTypeId == reciever.LiquidTypeId) != null)
                                    {
                                        @Model.LiquidTypeId.Find(l => l.LiquidTypeId == reciever.LiquidTypeId).LiquidName
                                    }
                                    else
                                    {
                                        <text>Unknown</text>
                                    }
                                </td>
                                <td>
                                    @reciever.CurrentDepth
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section script
    {
    


    <script>
        var blendItems = null;
        var Container = null;
        var toContainer = null;
        var Transfers = new Array();
        var containersOfThisLocation = getContainersOfThisLocation();
        var receiversTable = initiateTable1("containers-table",
            {
                "bLengthChange": false,
                "columnDefs": [
                                    {
                                        "targets": [0, 1],
                                        "visible": false,
                                        "searchable": false
                                    }
                ]
                ,
                "aoColumns": [
                        { "sTitle": "Id", "mData": "containerId" },
                        { "sTitle": "Liquid Type Id", "mData": "liquidTypeId" },
                        { "sTitle": "Container", "mData": "containerName" },
                        { "sTitle": "Liquid Type", "mData": "liquidType" },
                        { "sTitle": "Cur. Dip", "mData": "currentDepth" }
                ]
            }
        , function () { }, function () { });


        var transfersTable = initiateTable1("transfers-table",
         {
             "sDom": "t",
             "language": {
                 "emptyTable": "Please add transfers"
             },
             "columnDefs": [
                                 {
                                     "targets": [0, 1],
                                     "visible": false,
                                     "searchable": false
                                 }
             ]
                                  ,
             "bLengthChange": false,
             "aoColumns": [
                                           { "sTitle": "Container", "mData": "Container" },
                                           { "sTitle": "LiquidTypeId", "mData": "LiquidTypeId" },
                                           { "sTitle": "Container", "mData": "ContainerName" },
                                           { "sTitle": "Liquid", "mData": "LiquidName" },
                                           { "sTitle": "Cur. Dip", "mData": "CurrentDip" },
                                           { "sTitle": "Final Dip", "mData": "FinalDip" },
                                           { "sTitle": "Bulk (l)", "mData": "BulkVolume" },
                                           { "sTitle": "Strength", "mData": "Strength" },
                                           { "sTitle": "A/A (l)", "mData": "PureVolume" },
                                           { "sTitle": "Density", "mData": "Density" },
                                           { "sTitle": "Temperature", "mData": "Temperature" },
             ]

         }
     , function () { }, function () { });


        function updateWastage() {
            var toBulk = !isNaN($("input[name=DestinationBulkVolume]").val()) ? parseFloat($("input[name=DestinationBulkVolume]").val()) : 0;
            var toPure = !isNaN($("input[name=DestinationPureVolume]").val()) ? parseFloat($("input[name=DestinationPureVolume]").val()) : 0;
            var fromPure = 0;
            var fromBulk = 0;

            var transferData = transfersTable.rows().data();

            for (var i = 0; i < transferData.length ; i++) {
                fromBulk += parseFloat(transferData[i]["BulkVolume"]);
                fromPure += parseFloat(transferData[i]["PureVolume"])
            }

           // $("input[name=Wastage]").val((toBulk.toFixed(1) - fromBulk.toFixed(1)).toFixed(1));
            $("input[name=PureWastage]").val((toPure.toFixed(1) - fromPure.toFixed(1)).toFixed(1));
        }


        $("#liquidTransfer-form").on('submit', function (event) {
            var error = "";
            var data = getFormValues("liquidTransfer-form");
            var transferData = new Array()
            data["Transfers"] = transfersTable.rows().data();
           $.each(data["Transfers"], function (i, item) {
               item["CreatedUser"] = data.CreatedUser;
               item["LocationId"] = data.LocationId;
            });

            error = (typeof data["ToContainer"] == 'undefined') ? error + '<div class="alert alert-danger col-md-12">Please reselect the destination Vat/Receiver.</div>' : error;
            error = data["Transfers"].length <= 0 ? error + '<div class="alert alert-danger col-md-12">Please add sources to transfer.</div>' : error;
            error = $("input[name=TransferTime]").val() == "" ? error + '<div class="alert alert-danger col-md-12">Please enter transfer date.</div>' : error;
            error = $("select[name=Container]").val() == "0" ? error + '<div class="alert alert-danger col-md-12">Please select source container.</div>' : error;
            error = $("select[name=ToContainer]").val() == "0" ? error + '<div class="alert alert-danger col-md-12">Please select destination container.</div>' : error;
            error = $("#destination-transfer-div select[name='LiquidTypeId']").val() == "0" ? error + '<div class="alert alert-danger col-md-12">Please select Blend Liquid Type .</div>' : error;

            if (error != "") {
                showModalMessage("Error", error);
            } else {
                for (var i = 0; i < data["Transfers"].length ; i++) {
                    transferData.push(data["Transfers"][i]);
                }
                data["Transfers"] = transferData;

                console.log(data["Transfers"])
                sendObjectToServer("../../api/Warehouse/AddWarehousingBlend", data,
                   function (data) {
                       MaterialSelectReinitiate("select[name='Container']", 0)
                       MaterialSelectReinitiate("select[name='ToContainer']", 0)
                       MaterialSelectReinitiate("#destination-transfer-div select[name='LiquidTypeId']", 0)
                       $("input[name=TransferTime]").val("");
                       $("input[name=CurrentDip]").val("");
                       $("input[name=FinalDip]").val("");
                       $("input[name=Strength]").val("");
                       $("input[name=BulkVolume]").val("");
                       $("input[name=PureVolume]").val("");
                       $("input[name=DestinationDepthFrom]").val("");
                       $("input[name=DestinationDepthTo]").val("");
                       $("input[name=DestinationStrength]").val("");
                       $("input[name=DestinationBulkVolume]").val("");
                       $("input[name=DestinationPureVolume]").val("");
                       showModalMessage("Liquid Transfer", "Liquid Transfered");
                   }, function (data) {
                       showModalMessage("Error", '<div class="alert alert-danger col-md-12">' + data + '</div>');
                   });
            }
            event.preventDefault();
        });

        $("#addButton").on('click', function () {
            // destroy and reinitiate
            var data = {};
            var rowdata = transfersTable.rows().data(); // row data of the table
            data = getFormValues("liquidTransfer-div");
            data["ContainerName"] = Container["containerName"];
            data["LiquidName"] = getLiquidType(data["LiquidTypeId"])["liquidName"];

            var tableIndexColumn = "Container";

            var i = 0; // for iteration
            for (var material in rowdata) {
                // rowdata has unwanted objects, we are skipping them using length attribute limit
                if (i < rowdata.length) {
                    // if table already has the material, remove it.
                    if (rowdata["" + i + ""]["" + tableIndexColumn + ""] == data["" + tableIndexColumn + ""]) {

                        // get the index
                        var index = transfersTable.row(material).index();
                        var index = parseInt(index);

                        transfersTable.row(index).remove();
                        break;
                    }
                } else {
                    break;
                }
                i++;
            }

            // add material to the row
            transfersTable.row.add(data).draw(false);
            updateWastage();

            /***** To remove the ToContainer value if its is added to Tranfer list ********/
            $("#destination-transfer-div select[name=ToContainer] option:contains(" + data["Id"] + ")").remove();
            var mySelect2 = $('#destination-transfer-div select[name=ToContainer]');
            var options = "";
            var options = '<option value="0" > Recieving Vat</option>';
            $.each(mySelect2[0].options, function (i, item) {
                if (item.value != "0") {
                    options += '<option value="' + item.value + '">' + item.text + '</option>';
                }
            });
            $("#destination-transfer-div select[name=ToContainer]").html(options);
            MaterialSelectReinitiate("#destination-transfer-div select[name='ToContainer']", 0)

            /*****************/
        });


        //Source
        $("select[name=Container]").change(function () {
            if ($(this).val() == "0") {

                $("#liquid-percentage-from").removeAttr("style");
                MaterialSelectReinitiate("#liquidTransfer-div select[name='LiquidTypeId']", 0)
                Container["currentDepth"] = 0;
                $("input[name='CurrentDip']").val("0");
                $("input[name='FinalDip']").val("0");
                $("input[name='Strength']").val("0");
                $("input[name='BulkVolume']").val("0");
                $("input[name='PureVolume']").val("0");
               // $("input[name='Wastage']").val("0");
                $("input[name='PureWastage']").val("0");

                var sourceDepth = !isNaN(parseFloat($("input[name=FinalDip]").val())) ? parseFloat($("input[name=FinalDip]").val()) : parseFloat($("input[name=CurrentDip]").val());
                var destinationDepth = !isNaN(parseFloat($("input[name=DestinationDepthTo]").val())) ? parseFloat($("input[name=DestinationDepthTo]").val()) : parseFloat($("input[name=DestinationDepthFrom]").val());
                updateContainerImages(sourceDepth, destinationDepth);
                return;
            }
            $.ajax({
                type: 'get',
                url: "../../api/Container/Get?containerId=" + $(this).val(),
                dataType: 'json',
                contentType: 'application/json',
                success: function (response) {
                    Container = response;
                    var capacity = parseFloat((typeof Container["capacity"] != 'undefined' && Container["capacity"] != "") ? Container["capacity"] : "0");
                    var volume = parseFloat((typeof Container["fillVolume"] != 'undefined' && Container["fillVolume"] != "") ? Container["fillVolume"] : "0");
                    var pureVolume = parseFloat((typeof Container["pureVolume"] != 'undefined' && Container["pureVolume"] != "") ? Container["pureVolume"] : "0");
                    pureVolume = !isNaN(parseFloat(pureVolume)) ? parseFloat(pureVolume) : 0;
                    volume = !isNaN(parseFloat(volume)) ? parseFloat(volume) : 0;

                    MaterialSelectReinitiate("#liquidTransfer-div select[name='LiquidTypeId']", Container["liquidTypeId"])

                    $("input[name='CurrentDip']").val(Container["currentDepth"]);
                    $("input[name='FinalDip']").val("");
                    $("input[name='Strength']").val(((pureVolume / volume) * 100).toFixed(1));
                    $("input[name='FinalDip']").attr("min", 0);
                    $("input[name='FinalDip']").attr("max", Container["currentDepth"]);
                    $("input[name='Temperature']").val(Container["temperature"]);
                    $("input[name='Density']").val(Container["density"]);

                    var sourceDepth = !isNaN(parseFloat($("input[name=FinalDip]").val())) ? parseFloat($("input[name=FinalDip]").val()) : parseFloat($("input[name=CurrentDip]").val());
                    var destinationDepth = !isNaN(parseFloat($("input[name=DestinationDepthTo]").val())) ? parseFloat($("input[name=DestinationDepthTo]").val()) : parseFloat($("input[name=DestinationDepthFrom]").val());
                  updateContainerImages(sourceDepth, destinationDepth);

                    // based on from container, get a list of to containers
                  //var options = '<option value="0" > Recieving Vat</option>';
                  //$("#destination-transfer-div select[name=ToContainer]").html("");
                  //  for (var key in containersOfThisLocation) {
                  //      if (containersOfThisLocation[key]["liquidTypeId"] == Container["liquidTypeId"] && Container["containerId"] != containersOfThisLocation[key]["containerId"] || containersOfThisLocation[key]["currentDepth"] == 0) {
                  //          options += '<option value="' + containersOfThisLocation[key]["containerId"] + '">' + containersOfThisLocation[key]["containerName"] + '</option>';
                  //      }
                  //  }
                    //$("#destination-transfer-div select[name=ToContainer]").html(options);
                    //MaterialSelectReinitiate("#destination-transfer-div select[name='ToContainer']",0)

                    var options2 = '<option value="0" > Select Category</option>';
                    if (!$("#destination-transfer-div select[name=LiquidTypeId] option[value='0']").length > 0) {
                        $("#destination-transfer-div select[name=LiquidTypeId]").prepend(options2);
                        MaterialSelectReinitiate("#destination-transfer-div select[name='LiquidTypeId']", 0)
                    }

                    $("input[name='FinalDip']").val("");
                    $("input[name='PureVolume']").val("");
                    $("input[name='BulkVolume']").val("");
                  //  $("input[name='Wastage']").val("");
                    $("input[name='PureWastage']").val("");
                }
            });

        });

        $("input[name='FinalDip']").change(function () {
            var strength = (parseFloat(Container["pureVolume"]) / parseFloat(Container["fillVolume"])) * 100;
            var containerId = $("select[name='Container']").val() != "" ? parseFloat($("select[name='Container']").val()) : 0;
            var containerFromDepth = $("input[name='CurrentDip']").val() != "" ? parseFloat($("input[name='CurrentDip']").val()) : 0;
            var containerToDepth = $(this).val() != "" ? parseFloat($(this).val()) : 0;
            var volume = parseFloat(getVolume(containerId, containerFromDepth, containerToDepth));
            var sourceDepth = !isNaN(parseFloat($("input[name=FinalDip]").val())) ? parseFloat($("input[name=FinalDip]").val()) : parseFloat($("input[name=CurrentDip]").val());
            var destinationDepth = !isNaN(parseFloat($("input[name=DestinationDepthTo]").val())) ? parseFloat($("input[name=DestinationDepthTo]").val()) : parseFloat($("input[name=DestinationDepthFrom]").val());

            strength = !isNaN(strength) ? parseFloat(strength) : 0;
            volume = !isNaN(parseFloat(volume)) ? parseFloat(volume) : 0;
            var addedPureVolume = parseFloat(Container["pureVolume"]) - (((parseFloat(Container["fillVolume"]) - volume) * strength) / 100);

            $("input[name='BulkVolume']").val(volume.toFixed(1));
            $("input[name='PureVolume']").val(addedPureVolume.toFixed(1));
            updateWastage();
            updateContainerImages(sourceDepth, destinationDepth);
        });

        // Destination
        $("#destination-transfer-div select[name=ToContainer]").change(function () {
                if ($(this).val() == "0") {

                    $("#liquid-percentage-from").removeAttr("style");
                    MaterialSelectReinitiate("#destination-transfer-div select[name='LiquidTypeId']", 0)
                    toContainer["currentDepth"] = 0;
                    $("input[name='DestinationDepthFrom']").val("0");
                    $("input[name='DestinationDepthTo']").val("0");
                    $("input[name='DestinationDensity']").val("0");
                    $("input[name='DestinationTemperature']").val("0");
                    $("input[name='DestinationStrength']").val("0");
                    $("input[name='DestinationBulkVolume']").val("0");
                    $("input[name='DestinationPureVolume']").val("0");
                  //  $("input[name='Wastage']").val("0");

                    var sourceDepth = !isNaN(parseFloat($("input[name=FinalDip]").val())) ? parseFloat($("input[name=FinalDip]").val()) : parseFloat($("input[name=CurrentDip]").val());
                    var destinationDepth = !isNaN(parseFloat($("input[name=DestinationDepthTo]").val())) ? parseFloat($("input[name=DestinationDepthTo]").val()) : parseFloat($("input[name=DestinationDepthFrom]").val());
                    updateContainerImages(sourceDepth, destinationDepth);
                    return;
                }
            toContainer = getContainerFromDb("" + $(this).val() + "");
            //if (parseFloat(toContainer["currentDepth"]) > 0 && toContainer["liquidTypeId"] != $("#liquidTransfer-div select[name='LiquidTypeId']").val()) {
            //   // MaterialSelectReinitiate("select[name='ToContainer']", 0);


            //    $("#liquid-percentage-from").removeAttr("style");

            //    MaterialSelectReinitiate("#liquidTransfer-div  select[name='LiquidTypeId']", 0)
            //    toContainer["currentDepth"] = 0;
            //    $("input[name='DestinationDepthFrom']").val("0");
            //    $("input[name='DestinationDepthTo']").val("0");
            //    $("input[name='DestinationDensity']").val("0");
            //    $("input[name='DestinationTemperature']").val("0");
            //    $("input[name='DestinationStrength']").val("0");
            //    $("input[name='DestinationBulkVolume']").val("0");
            //    //$("input[name='Wastage']").val("0");

            //    var sourceDepth = !isNaN(parseFloat($("input[name=FinalDip]").val())) ? parseFloat($("input[name=FinalDip]").val()) : parseFloat($("input[name=CurrentDip]").val());
            //    var destinationDepth = !isNaN(parseFloat($("input[name=DestinationDepthTo]").val())) ? parseFloat($("input[name=DestinationDepthTo]").val()) : parseFloat($("input[name=DestinationDepthFrom]").val());
            //    updateContainerImages(sourceDepth, destinationDepth);
            //    return;
            //}

            var capacity = parseFloat((typeof toContainer["capacity"] != 'undefined' && toContainer["capacity"] != "") ? toContainer["capacity"] : "0");
            var density = parseFloat((typeof toContainer["density"] != 'undefined' && toContainer["density"] != "") ? toContainer["density"] : "0") / 1000;
            var volume = parseFloat((typeof toContainer["fillVolume"] != 'undefined' && toContainer["fillVolume"] != "") ? toContainer["fillVolume"] : "0");


            $("input[name='DestinationDepthFrom']").val(toContainer["currentDepth"]);

            $("input[name='DestinationDepthTo']").val("");

            $("input[name='DestinationDepthTo']").attr("min", toContainer["currentDepth"]);

            $("input[name='DestinationDepthTo']").attr("max", toContainer["maxDepth"]);

            var sourceDepth = !isNaN(parseFloat($("input[name=FinalDip]").val())) ? parseFloat($("input[name=FinalDip]").val()) : parseFloat($("input[name=CurrentDip]").val());
            var destinationDepth = !isNaN(parseFloat($("input[name=DestinationDepthTo]").val())) ? parseFloat($("input[name=DestinationDepthTo]").val()) : parseFloat($("input[name=DestinationDepthFrom]").val());

            updateContainerImages(sourceDepth, destinationDepth);

            // reset destination table
            $("input[name='DestinationDepthTo']").val("");
            $("input[name='DestinationTemperature']").val("");
            $("input[name='DestinationDensity']").val("");
            $("input[name='DestinationStrength']").val("");
            $("input[name='DestinationPureVolume']").val("");
            $("input[name='DestinationBulkVolume']").val("");
           // $("input[name='Wastage']").val("");
            $("input[name='PureWastage']").val("");

            var NewDestinationBulk = parseFloat(toContainer["fillVolume"]);
            var NewDestinationPure = parseFloat(toContainer["pureVolume"]);
            NewDestinationBulk = !isNaN(NewDestinationBulk) ? NewDestinationBulk : 0;
            NewDestinationPure = !isNaN(NewDestinationPure) ? NewDestinationPure : 0;
            $("input[name='NewDestinationBulk']").val(NewDestinationBulk);
            $("input[name='NewDestinationPure']").val(NewDestinationPure);
        });

        $('input[name=DestinationDensity]').change(function () {
            if ($('input[name=DestinationTemperature]').val() != '') {
                var strength = getStrength($(this).val(), $('input[name=DestinationTemperature]').val());
                var volume = $("input[name=DestinationBulkVolume]").val() != "" ? parseFloat($("input[name=DestinationBulkVolume]").val()) : 0;
                var density = parseFloat($(this).val());
                volume = !isNaN(parseFloat(volume)) ? parseFloat(volume) : 0;
                strength = !isNaN(strength) ? parseFloat(strength) : 0;
                density = !isNaN(parseFloat(density)) ? parseFloat(density) : 0;
                var addedPureVolume = (((parseFloat(toContainer["fillVolume"]) + volume) * strength) / 100) - parseFloat(toContainer["pureVolume"]);
                var currentPure = !isNaN(parseFloat(toContainer["pureVolume"])) ? parseFloat(toContainer["pureVolume"]) : 0;
                var currentBulk = !isNaN(parseFloat(toContainer["fillVolume"])) ? parseFloat(toContainer["fillVolume"]) : 0;
                addedPureVolume = !isNaN(parseFloat(addedPureVolume)) ? parseFloat(addedPureVolume) : 0;

                currentPure = !isNaN(parseFloat(currentPure)) ? parseFloat(currentPure) : 0;
                currentBulk = !isNaN(parseFloat(currentBulk)) ? parseFloat(currentBulk) : 0;
                var totalPure = !isNaN(parseFloat(currentPure.toFixed + addedPureVolume)) ? parseFloat(currentPure.toFixed + addedPureVolume) : 0;
                console.log((currentPure + addedPureVolume).toFixed(1));
                $("input[name=NewDestinationBulk]").val((currentBulk + volume).toFixed(1));
                $("input[name=NewDestinationPure]").val((currentPure + addedPureVolume).toFixed(1));
                $("input[name=DestinationStrength]").val(strength.toFixed(1));
                $("input[name=DestinationPureVolume]").val(addedPureVolume.toFixed(1));
            } else {
                $("input[name=DestinationStrength]").val('');
            }

            updateWastage();
        });

        $('input[name=DestinationTemperature]').change(function () {
            if ($('input[name=DestinationDensity]').val() != '') {
                var volume = $("input[name=DestinationBulkVolume]").val() != "" ? parseFloat($("input[name=DestinationBulkVolume]").val()) : 0;
                var density = $('input[name=DestinationDensity]').val() != '' ? parseFloat($('input[name=DestinationDensity]').val()) : 0;
                var strength = getStrength($('input[name=DestinationDensity]').val(), $(this).val());

                volume = !isNaN(parseFloat(volume)) ? parseFloat(volume) : 0;
                strength = !isNaN(strength) ? parseFloat(strength) : 0;
                density = !isNaN(parseFloat(density)) ? parseFloat(density) : 0;
                var currentPure = !isNaN(parseFloat(toContainer["pureVolume"])) ? parseFloat(toContainer["pureVolume"]) : 0;
                var currentBulk = !isNaN(parseFloat(toContainer["fillVolume"])) ? parseFloat(toContainer["fillVolume"]) : 0;
                var addedPureVolume = (((parseFloat(toContainer["fillVolume"]) + volume) * strength) / 100) - parseFloat(toContainer["pureVolume"]);
                addedPureVolume = !isNaN(parseFloat(addedPureVolume)) ? parseFloat(addedPureVolume) : 0;
                currentPure = !isNaN(parseFloat(currentPure)) ? parseFloat(currentPure) : 0;
                currentBulk = !isNaN(parseFloat(currentBulk)) ? parseFloat(currentBulk) : 0;
                var totalPure = !isNaN(parseFloat(currentPure.toFixed + addedPureVolume)) ? parseFloat(currentPure.toFixed + addedPureVolume) : 0;
                console.log((currentPure + addedPureVolume).toFixed(1));
                $("input[name=NewDestinationBulk]").val((currentBulk + volume).toFixed(1));
                $("input[name=NewDestinationPure]").val((currentPure + addedPureVolume).toFixed(1));

                $("input[name=DestinationStrength]").val(strength.toFixed(1));
                $("input[name=DestinationPureVolume]").val(addedPureVolume.toFixed(1));
            } else {
                $("input[name=DestinationStrength]").val('');
            }

            updateWastage();
        });

        $("input[name='DestinationDepthTo']").change(function () {
            var strength = parseFloat($("#input[name='DestinationStrength']").val() != "" || $("input[name='DestinationStrength']").val() != "Error" ? parseFloat($("input[name='DestinationStrength']").val()) : 0);
            var density = parseFloat($("input[name='DestinationDensity']").val());
            var containerId = $("select[name='ToContainer']").val() != "" ? parseFloat($("select[name='ToContainer']").val()) : 0;
            var containerFromDepth = $("input[name='DestinationDepthFrom']").val() != "" ? parseFloat($("input[name='DestinationDepthFrom']").val()) : 0;
            var containerToDepth = $(this).val() != "" ? parseFloat($(this).val()) : 0;
            var volume = parseFloat(getVolume(containerId, containerFromDepth, containerToDepth));
            var sourceDepth = !isNaN(parseFloat($("input[name=FinalDip]").val())) ? parseFloat($("input[name=FinalDip]").val()) : parseFloat($("input[name=CurrentDip]").val());
            var destinationDepth = !isNaN(parseFloat($("input[name=DestinationDepthTo]").val())) ? parseFloat($("input[name=DestinationDepthTo]").val()) : parseFloat($("input[name=DestinationDepthFrom]").val());
            var currentPure = !isNaN(parseFloat(toContainer["pureVolume"])) ? parseFloat(toContainer["pureVolume"]) : 0;
            var currentBulk = !isNaN(parseFloat(toContainer["fillVolume"])) ? parseFloat(toContainer["fillVolume"]) : 0;
            strength = !isNaN(strength) ? parseFloat(strength) : 0;
            volume = !isNaN(parseFloat(volume)) ? parseFloat(volume) : 0;
            density = !isNaN(parseFloat(density)) ? parseFloat(density) : 0;
            var addedPureVolume = (((parseFloat(toContainer["fillVolume"]) + volume) * strength) / 100) - parseFloat(toContainer["pureVolume"]);


            addedPureVolume = !isNaN(parseFloat(addedPureVolume)) ? parseFloat(addedPureVolume) : 0;
            currentPure = !isNaN(parseFloat(currentPure)) ? parseFloat(currentPure) : 0;
            currentBulk = !isNaN(parseFloat(currentBulk)) ? parseFloat(currentBulk) : 0;
            var totalPure = !isNaN(parseFloat(currentPure.toFixed + addedPureVolume)) ? parseFloat(currentPure.toFixed + addedPureVolume) : 0;
            console.log((currentPure + addedPureVolume).toFixed(1));
            $("input[name=NewDestinationBulk]").val((currentBulk + volume).toFixed(1));
            $("input[name=NewDestinationPure]").val((currentPure + addedPureVolume).toFixed(1));
            $("input[name='DestinationBulkVolume']").val(volume.toFixed(1));
            $("input[name=DestinationPureVolume]").val(addedPureVolume.toFixed(1));
            $("input[name='DestinationBulkVolume']").val(volume.toFixed(1));

            updateWastage();
            updateContainerImages(sourceDepth, destinationDepth);

        });

        function updateContainerImages(fromContainerToDepth, toContainerToDepth) {

            if (Container != null) {

                var containerView = $("#" + "liquid-percentage-from");
                var progressBar = containerView.find(".progress");
                var greenbar = progressBar.find(".progress-bar-one");
                var blackbar = progressBar.find(".progress-bar-two");
                var barOneWidth = "width:" + ((fromContainerToDepth / parseFloat(Container["maxDepth"])) * 100).toFixed(1) + "%";
                var barTwoWidth = "width:" + ((((Container["currentDepth"] - fromContainerToDepth)) / parseFloat(Container["maxDepth"])) * 100).toFixed(1) + "%;" + "background-color:black";
                console.log(barTwoWidth);
                greenbar.attr("style", barOneWidth);
                blackbar.attr("style", barTwoWidth);
            }

            if (toContainer != null) {

                var containerView = $("#" + "liquid-percentage-to");
                var progressBar = containerView.find(".progress");
                var greenbar = progressBar.find(".progress-bar-one");
                var blackbar = progressBar.find(".progress-bar-two");
                var barOneWidth = "width:" + ((parseFloat(toContainer["currentDepth"]) / parseFloat(toContainer["maxDepth"])) * 100).toFixed(1) + "%";
                var barTwoWidth = "width:" + ((((toContainerToDepth - toContainer["currentDepth"])) / parseFloat(toContainer["maxDepth"])) * 100).toFixed(1) + "%;" + "background-color:yellow";

                greenbar.attr("style", barOneWidth);
                blackbar.attr("style", barTwoWidth);
            }

            updateWastage();
        }


        var d = new Date();
        d.setFullYear(d.getFullYear() - 100);
        $('.datepicker').pickadate({
            // Escape any “rule” characters with an exclamation mark (!).
            format: 'yyyy-mm-dd',
            selectYears: d,
            max: new Date(),
            selectMonths: true, // Creates a dropdown to control month
            selectYears: 15 // Creates a dropdown of 15 years to control year
        });

        var $input = $('.datepicker').pickadate()
        var picker = $input.pickadate('picker');
        picker.set('disable', true)

        $('select').each(function () {
            $(this).material_select();
            $(this).siblings("span").html("");
        });
        $('select').addClass("hidden");





        $("input[name=DestinationDepthTo]").on("change", function () {
            console.log("hitting");
            var volume = parseFloat(getVolume(toContainer["containerId"], toContainer["currentDepth"], $(this).val()));
            var strength = !isNaN(parseFloat($("input[name=DestinationStrength]").val())) ? parseFloat($("input[name=DestinationStrength]").val()) : 0;
            var pure = parseFloat((volume * strength) / 100).toFixed(1);
            $("input[name=DestinationBulkVolume]").val(volume);
            $("input[name=DestinationStrength]").val(strength);
            $("input[name=DestinationPureVolume]").val(pure);
        });

        $(".navigation-help").html("Warhousing / Liquid Transfer");

        $(function () {

            //var temp = '<option value="0" > Select Category</option>';
            //if (!$("#destination-transfer-div select[name=LiquidTypeId] option[value='0']").length > 0) {
            //    $("#destination-transfer-div select[name=LiquidTypeId]").prepend(temp);
            //    MaterialSelectReinitiate("#destination-transfer-div select[name='LiquidTypeId']", 0)
            //}

        })
    </script>



    }